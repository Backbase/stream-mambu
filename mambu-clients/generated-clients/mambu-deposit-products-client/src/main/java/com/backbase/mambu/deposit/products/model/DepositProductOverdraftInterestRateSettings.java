/*
 * depositproducts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.products.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.deposit.products.model.DecimalInterval;
import com.backbase.mambu.deposit.products.model.DepositProductOverdraftInterestRateTier;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The overdraft interest settings, defines constraints regarding interest that will be used on the account created based on this product.
 */
@ApiModel(description = "The overdraft interest settings, defines constraints regarding interest that will be used on the account created based on this product.")
@JsonPropertyOrder({
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_SOURCE,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INDEX_SOURCE_KEY,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_TIERS,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_TERMS,
  DepositProductOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT
})

public class DepositProductOverdraftInterestRateSettings {
  public static final String JSON_PROPERTY_INTEREST_RATE = "interestRate";
  private DecimalInterval interestRate;

  /**
   * Interest rate review frequency measurement unit
   */
  public enum InterestRateReviewUnitEnum {
    DAYS("DAYS"),
    
    WEEKS("WEEKS"),
    
    MONTHS("MONTHS");

    private String value;

    InterestRateReviewUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateReviewUnitEnum fromValue(String value) {
      for (InterestRateReviewUnitEnum b : InterestRateReviewUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT = "interestRateReviewUnit";
  private InterestRateReviewUnitEnum interestRateReviewUnit;

  /**
   * Interest calculation method: fixed or (interest spread + active organization index interest rate)
   */
  public enum InterestRateSourceEnum {
    FIXED_INTEREST_RATE("FIXED_INTEREST_RATE"),
    
    INDEX_INTEREST_RATE("INDEX_INTEREST_RATE");

    private String value;

    InterestRateSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateSourceEnum fromValue(String value) {
      for (InterestRateSourceEnum b : InterestRateSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_SOURCE = "interestRateSource";
  private InterestRateSourceEnum interestRateSource;

  public static final String JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT = "interestRateReviewCount";
  private Integer interestRateReviewCount;

  public static final String JSON_PROPERTY_INDEX_SOURCE_KEY = "indexSourceKey";
  private String indexSourceKey;

  public static final String JSON_PROPERTY_INTEREST_RATE_TIERS = "interestRateTiers";
  private List<DepositProductOverdraftInterestRateTier> interestRateTiers = null;

  /**
   * The interval used for determining how often is interest charged
   */
  public enum InterestChargeFrequencyEnum {
    ANNUALIZED("ANNUALIZED"),
    
    EVERY_MONTH("EVERY_MONTH"),
    
    EVERY_FOUR_WEEKS("EVERY_FOUR_WEEKS"),
    
    EVERY_WEEK("EVERY_WEEK"),
    
    EVERY_DAY("EVERY_DAY"),
    
    EVERY_X_DAYS("EVERY_X_DAYS");

    private String value;

    InterestChargeFrequencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestChargeFrequencyEnum fromValue(String value) {
      for (InterestChargeFrequencyEnum b : InterestChargeFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY = "interestChargeFrequency";
  private InterestChargeFrequencyEnum interestChargeFrequency;

  /**
   * The option for how is the interest rate determined when being accrued for an account
   */
  public enum InterestRateTermsEnum {
    FIXED("FIXED"),
    
    TIERED("TIERED"),
    
    TIERED_PERIOD("TIERED_PERIOD");

    private String value;

    InterestRateTermsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateTermsEnum fromValue(String value) {
      for (InterestRateTermsEnum b : InterestRateTermsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_TERMS = "interestRateTerms";
  private InterestRateTermsEnum interestRateTerms;

  public static final String JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT = "interestChargeFrequencyCount";
  private Integer interestChargeFrequencyCount;


  public DepositProductOverdraftInterestRateSettings interestRate(DecimalInterval interestRate) {
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Get interestRate
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DecimalInterval getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(DecimalInterval interestRate) {
    this.interestRate = interestRate;
  }


  public DepositProductOverdraftInterestRateSettings interestRateReviewUnit(InterestRateReviewUnitEnum interestRateReviewUnit) {
    
    this.interestRateReviewUnit = interestRateReviewUnit;
    return this;
  }

   /**
   * Interest rate review frequency measurement unit
   * @return interestRateReviewUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest rate review frequency measurement unit")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateReviewUnitEnum getInterestRateReviewUnit() {
    return interestRateReviewUnit;
  }


  public void setInterestRateReviewUnit(InterestRateReviewUnitEnum interestRateReviewUnit) {
    this.interestRateReviewUnit = interestRateReviewUnit;
  }


  public DepositProductOverdraftInterestRateSettings interestRateSource(InterestRateSourceEnum interestRateSource) {
    
    this.interestRateSource = interestRateSource;
    return this;
  }

   /**
   * Interest calculation method: fixed or (interest spread + active organization index interest rate)
   * @return interestRateSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest calculation method: fixed or (interest spread + active organization index interest rate)")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateSourceEnum getInterestRateSource() {
    return interestRateSource;
  }


  public void setInterestRateSource(InterestRateSourceEnum interestRateSource) {
    this.interestRateSource = interestRateSource;
  }


  public DepositProductOverdraftInterestRateSettings interestRateReviewCount(Integer interestRateReviewCount) {
    
    this.interestRateReviewCount = interestRateReviewCount;
    return this;
  }

   /**
   * Interest rate review frequency unit count
   * @return interestRateReviewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest rate review frequency unit count")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterestRateReviewCount() {
    return interestRateReviewCount;
  }


  public void setInterestRateReviewCount(Integer interestRateReviewCount) {
    this.interestRateReviewCount = interestRateReviewCount;
  }


  public DepositProductOverdraftInterestRateSettings indexSourceKey(String indexSourceKey) {
    
    this.indexSourceKey = indexSourceKey;
    return this;
  }

   /**
   * Index rate source key.
   * @return indexSourceKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Index rate source key.")
  @JsonProperty(JSON_PROPERTY_INDEX_SOURCE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIndexSourceKey() {
    return indexSourceKey;
  }


  public void setIndexSourceKey(String indexSourceKey) {
    this.indexSourceKey = indexSourceKey;
  }


  public DepositProductOverdraftInterestRateSettings interestRateTiers(List<DepositProductOverdraftInterestRateTier> interestRateTiers) {
    
    this.interestRateTiers = interestRateTiers;
    return this;
  }

  public DepositProductOverdraftInterestRateSettings addInterestRateTiersItem(DepositProductOverdraftInterestRateTier interestRateTiersItem) {
    if (this.interestRateTiers == null) {
      this.interestRateTiers = new ArrayList<>();
    }
    this.interestRateTiers.add(interestRateTiersItem);
    return this;
  }

   /**
   * The list of interest rate tiers available for the current settings instance
   * @return interestRateTiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of interest rate tiers available for the current settings instance")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_TIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DepositProductOverdraftInterestRateTier> getInterestRateTiers() {
    return interestRateTiers;
  }


  public void setInterestRateTiers(List<DepositProductOverdraftInterestRateTier> interestRateTiers) {
    this.interestRateTiers = interestRateTiers;
  }


  public DepositProductOverdraftInterestRateSettings interestChargeFrequency(InterestChargeFrequencyEnum interestChargeFrequency) {
    
    this.interestChargeFrequency = interestChargeFrequency;
    return this;
  }

   /**
   * The interval used for determining how often is interest charged
   * @return interestChargeFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interval used for determining how often is interest charged")
  @JsonProperty(JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestChargeFrequencyEnum getInterestChargeFrequency() {
    return interestChargeFrequency;
  }


  public void setInterestChargeFrequency(InterestChargeFrequencyEnum interestChargeFrequency) {
    this.interestChargeFrequency = interestChargeFrequency;
  }


  public DepositProductOverdraftInterestRateSettings interestRateTerms(InterestRateTermsEnum interestRateTerms) {
    
    this.interestRateTerms = interestRateTerms;
    return this;
  }

   /**
   * The option for how is the interest rate determined when being accrued for an account
   * @return interestRateTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The option for how is the interest rate determined when being accrued for an account")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_TERMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateTermsEnum getInterestRateTerms() {
    return interestRateTerms;
  }


  public void setInterestRateTerms(InterestRateTermsEnum interestRateTerms) {
    this.interestRateTerms = interestRateTerms;
  }


  public DepositProductOverdraftInterestRateSettings interestChargeFrequencyCount(Integer interestChargeFrequencyCount) {
    
    this.interestChargeFrequencyCount = interestChargeFrequencyCount;
    return this;
  }

   /**
   * the count of units to apply over the interval
   * @return interestChargeFrequencyCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the count of units to apply over the interval")
  @JsonProperty(JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterestChargeFrequencyCount() {
    return interestChargeFrequencyCount;
  }


  public void setInterestChargeFrequencyCount(Integer interestChargeFrequencyCount) {
    this.interestChargeFrequencyCount = interestChargeFrequencyCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositProductOverdraftInterestRateSettings depositProductOverdraftInterestRateSettings = (DepositProductOverdraftInterestRateSettings) o;
    return Objects.equals(this.interestRate, depositProductOverdraftInterestRateSettings.interestRate) &&
        Objects.equals(this.interestRateReviewUnit, depositProductOverdraftInterestRateSettings.interestRateReviewUnit) &&
        Objects.equals(this.interestRateSource, depositProductOverdraftInterestRateSettings.interestRateSource) &&
        Objects.equals(this.interestRateReviewCount, depositProductOverdraftInterestRateSettings.interestRateReviewCount) &&
        Objects.equals(this.indexSourceKey, depositProductOverdraftInterestRateSettings.indexSourceKey) &&
        Objects.equals(this.interestRateTiers, depositProductOverdraftInterestRateSettings.interestRateTiers) &&
        Objects.equals(this.interestChargeFrequency, depositProductOverdraftInterestRateSettings.interestChargeFrequency) &&
        Objects.equals(this.interestRateTerms, depositProductOverdraftInterestRateSettings.interestRateTerms) &&
        Objects.equals(this.interestChargeFrequencyCount, depositProductOverdraftInterestRateSettings.interestChargeFrequencyCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interestRate, interestRateReviewUnit, interestRateSource, interestRateReviewCount, indexSourceKey, interestRateTiers, interestChargeFrequency, interestRateTerms, interestChargeFrequencyCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositProductOverdraftInterestRateSettings {\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    interestRateReviewUnit: ").append(toIndentedString(interestRateReviewUnit)).append("\n");
    sb.append("    interestRateSource: ").append(toIndentedString(interestRateSource)).append("\n");
    sb.append("    interestRateReviewCount: ").append(toIndentedString(interestRateReviewCount)).append("\n");
    sb.append("    indexSourceKey: ").append(toIndentedString(indexSourceKey)).append("\n");
    sb.append("    interestRateTiers: ").append(toIndentedString(interestRateTiers)).append("\n");
    sb.append("    interestChargeFrequency: ").append(toIndentedString(interestChargeFrequency)).append("\n");
    sb.append("    interestRateTerms: ").append(toIndentedString(interestRateTerms)).append("\n");
    sb.append("    interestChargeFrequencyCount: ").append(toIndentedString(interestChargeFrequencyCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

