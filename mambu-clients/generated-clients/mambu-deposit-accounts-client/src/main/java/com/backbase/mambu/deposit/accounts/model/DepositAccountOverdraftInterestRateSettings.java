/*
 * deposits
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.accounts.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.deposit.accounts.model.DepositAccountInterestRateTier;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Overdraft interest rate settings for deposit accounts
 */
@ApiModel(description = "Overdraft interest rate settings for deposit accounts")
@JsonPropertyOrder({
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_SPREAD,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_SOURCE,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_TIERS,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_ENCODED_KEY,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT,
  DepositAccountOverdraftInterestRateSettings.JSON_PROPERTY_INTEREST_RATE_TERMS
})

public class DepositAccountOverdraftInterestRateSettings {
  public static final String JSON_PROPERTY_INTEREST_RATE = "interestRate";
  private BigDecimal interestRate;

  public static final String JSON_PROPERTY_INTEREST_SPREAD = "interestSpread";
  private BigDecimal interestSpread;

  /**
   * The interest rate review frequency measurement unit
   */
  public enum InterestRateReviewUnitEnum {
    DAYS("DAYS"),
    
    WEEKS("WEEKS"),
    
    MONTHS("MONTHS");

    private String value;

    InterestRateReviewUnitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateReviewUnitEnum fromValue(String value) {
      for (InterestRateReviewUnitEnum b : InterestRateReviewUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT = "interestRateReviewUnit";
  private InterestRateReviewUnitEnum interestRateReviewUnit;

  /**
   * The interest rate source. Represents the interest calculation method
   */
  public enum InterestRateSourceEnum {
    FIXED_INTEREST_RATE("FIXED_INTEREST_RATE"),
    
    INDEX_INTEREST_RATE("INDEX_INTEREST_RATE");

    private String value;

    InterestRateSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateSourceEnum fromValue(String value) {
      for (InterestRateSourceEnum b : InterestRateSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_SOURCE = "interestRateSource";
  private InterestRateSourceEnum interestRateSource;

  public static final String JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT = "interestRateReviewCount";
  private Integer interestRateReviewCount;

  public static final String JSON_PROPERTY_INTEREST_RATE_TIERS = "interestRateTiers";
  private List<DepositAccountInterestRateTier> interestRateTiers = null;

  /**
   * The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts
   */
  public enum InterestChargeFrequencyEnum {
    ANNUALIZED("ANNUALIZED"),
    
    EVERY_MONTH("EVERY_MONTH"),
    
    EVERY_FOUR_WEEKS("EVERY_FOUR_WEEKS"),
    
    EVERY_WEEK("EVERY_WEEK"),
    
    EVERY_DAY("EVERY_DAY"),
    
    EVERY_X_DAYS("EVERY_X_DAYS");

    private String value;

    InterestChargeFrequencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestChargeFrequencyEnum fromValue(String value) {
      for (InterestChargeFrequencyEnum b : InterestChargeFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY = "interestChargeFrequency";
  private InterestChargeFrequencyEnum interestChargeFrequency;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT = "interestChargeFrequencyCount";
  private Integer interestChargeFrequencyCount;

  /**
   * How is the interest rate determined when being accrued for an account
   */
  public enum InterestRateTermsEnum {
    FIXED("FIXED"),
    
    TIERED("TIERED"),
    
    TIERED_PERIOD("TIERED_PERIOD");

    private String value;

    InterestRateTermsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterestRateTermsEnum fromValue(String value) {
      for (InterestRateTermsEnum b : InterestRateTermsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEREST_RATE_TERMS = "interestRateTerms";
  private InterestRateTermsEnum interestRateTerms;


  public DepositAccountOverdraftInterestRateSettings interestRate(BigDecimal interestRate) {
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * The interest rate for the deposit account
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interest rate for the deposit account")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
  }


  public DepositAccountOverdraftInterestRateSettings interestSpread(BigDecimal interestSpread) {
    
    this.interestSpread = interestSpread;
    return this;
  }

   /**
   * The rate based on which the interest is accrued and applied for accounts with InterestRateSource#INDEX_INTEREST_RATE
   * @return interestSpread
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rate based on which the interest is accrued and applied for accounts with InterestRateSource#INDEX_INTEREST_RATE")
  @JsonProperty(JSON_PROPERTY_INTEREST_SPREAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getInterestSpread() {
    return interestSpread;
  }


  public void setInterestSpread(BigDecimal interestSpread) {
    this.interestSpread = interestSpread;
  }


  public DepositAccountOverdraftInterestRateSettings interestRateReviewUnit(InterestRateReviewUnitEnum interestRateReviewUnit) {
    
    this.interestRateReviewUnit = interestRateReviewUnit;
    return this;
  }

   /**
   * The interest rate review frequency measurement unit
   * @return interestRateReviewUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interest rate review frequency measurement unit")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_REVIEW_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateReviewUnitEnum getInterestRateReviewUnit() {
    return interestRateReviewUnit;
  }


  public void setInterestRateReviewUnit(InterestRateReviewUnitEnum interestRateReviewUnit) {
    this.interestRateReviewUnit = interestRateReviewUnit;
  }


   /**
   * The interest rate source. Represents the interest calculation method
   * @return interestRateSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interest rate source. Represents the interest calculation method")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateSourceEnum getInterestRateSource() {
    return interestRateSource;
  }




  public DepositAccountOverdraftInterestRateSettings interestRateReviewCount(Integer interestRateReviewCount) {
    
    this.interestRateReviewCount = interestRateReviewCount;
    return this;
  }

   /**
   * The interest rate review frequency unit count
   * @return interestRateReviewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interest rate review frequency unit count")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_REVIEW_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterestRateReviewCount() {
    return interestRateReviewCount;
  }


  public void setInterestRateReviewCount(Integer interestRateReviewCount) {
    this.interestRateReviewCount = interestRateReviewCount;
  }


  public DepositAccountOverdraftInterestRateSettings interestRateTiers(List<DepositAccountInterestRateTier> interestRateTiers) {
    
    this.interestRateTiers = interestRateTiers;
    return this;
  }

  public DepositAccountOverdraftInterestRateSettings addInterestRateTiersItem(DepositAccountInterestRateTier interestRateTiersItem) {
    if (this.interestRateTiers == null) {
      this.interestRateTiers = new ArrayList<>();
    }
    this.interestRateTiers.add(interestRateTiersItem);
    return this;
  }

   /**
   * The list of interest rate tiers. An interest rate tier holds the values to define how the interest is computed
   * @return interestRateTiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of interest rate tiers. An interest rate tier holds the values to define how the interest is computed")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_TIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DepositAccountInterestRateTier> getInterestRateTiers() {
    return interestRateTiers;
  }


  public void setInterestRateTiers(List<DepositAccountInterestRateTier> interestRateTiers) {
    this.interestRateTiers = interestRateTiers;
  }


  public DepositAccountOverdraftInterestRateSettings interestChargeFrequency(InterestChargeFrequencyEnum interestChargeFrequency) {
    
    this.interestChargeFrequency = interestChargeFrequency;
    return this;
  }

   /**
   * The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts
   * @return interestChargeFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interest change frequency. Holds the possible values for how often is interest charged on loan or deposit accounts")
  @JsonProperty(JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestChargeFrequencyEnum getInterestChargeFrequency() {
    return interestChargeFrequency;
  }


  public void setInterestChargeFrequency(InterestChargeFrequencyEnum interestChargeFrequency) {
    this.interestChargeFrequency = interestChargeFrequency;
  }


   /**
   * The encoded for this set of interest settings, auto generated, unique
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded for this set of interest settings, auto generated, unique")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public DepositAccountOverdraftInterestRateSettings interestChargeFrequencyCount(Integer interestChargeFrequencyCount) {
    
    this.interestChargeFrequencyCount = interestChargeFrequencyCount;
    return this;
  }

   /**
   * The count of units to apply over the interval (e.g. [x] weeks)
   * @return interestChargeFrequencyCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The count of units to apply over the interval (e.g. [x] weeks)")
  @JsonProperty(JSON_PROPERTY_INTEREST_CHARGE_FREQUENCY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterestChargeFrequencyCount() {
    return interestChargeFrequencyCount;
  }


  public void setInterestChargeFrequencyCount(Integer interestChargeFrequencyCount) {
    this.interestChargeFrequencyCount = interestChargeFrequencyCount;
  }


  public DepositAccountOverdraftInterestRateSettings interestRateTerms(InterestRateTermsEnum interestRateTerms) {
    
    this.interestRateTerms = interestRateTerms;
    return this;
  }

   /**
   * How is the interest rate determined when being accrued for an account
   * @return interestRateTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How is the interest rate determined when being accrued for an account")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE_TERMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestRateTermsEnum getInterestRateTerms() {
    return interestRateTerms;
  }


  public void setInterestRateTerms(InterestRateTermsEnum interestRateTerms) {
    this.interestRateTerms = interestRateTerms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositAccountOverdraftInterestRateSettings depositAccountOverdraftInterestRateSettings = (DepositAccountOverdraftInterestRateSettings) o;
    return Objects.equals(this.interestRate, depositAccountOverdraftInterestRateSettings.interestRate) &&
        Objects.equals(this.interestSpread, depositAccountOverdraftInterestRateSettings.interestSpread) &&
        Objects.equals(this.interestRateReviewUnit, depositAccountOverdraftInterestRateSettings.interestRateReviewUnit) &&
        Objects.equals(this.interestRateSource, depositAccountOverdraftInterestRateSettings.interestRateSource) &&
        Objects.equals(this.interestRateReviewCount, depositAccountOverdraftInterestRateSettings.interestRateReviewCount) &&
        Objects.equals(this.interestRateTiers, depositAccountOverdraftInterestRateSettings.interestRateTiers) &&
        Objects.equals(this.interestChargeFrequency, depositAccountOverdraftInterestRateSettings.interestChargeFrequency) &&
        Objects.equals(this.encodedKey, depositAccountOverdraftInterestRateSettings.encodedKey) &&
        Objects.equals(this.interestChargeFrequencyCount, depositAccountOverdraftInterestRateSettings.interestChargeFrequencyCount) &&
        Objects.equals(this.interestRateTerms, depositAccountOverdraftInterestRateSettings.interestRateTerms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interestRate, interestSpread, interestRateReviewUnit, interestRateSource, interestRateReviewCount, interestRateTiers, interestChargeFrequency, encodedKey, interestChargeFrequencyCount, interestRateTerms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositAccountOverdraftInterestRateSettings {\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    interestSpread: ").append(toIndentedString(interestSpread)).append("\n");
    sb.append("    interestRateReviewUnit: ").append(toIndentedString(interestRateReviewUnit)).append("\n");
    sb.append("    interestRateSource: ").append(toIndentedString(interestRateSource)).append("\n");
    sb.append("    interestRateReviewCount: ").append(toIndentedString(interestRateReviewCount)).append("\n");
    sb.append("    interestRateTiers: ").append(toIndentedString(interestRateTiers)).append("\n");
    sb.append("    interestChargeFrequency: ").append(toIndentedString(interestChargeFrequency)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    interestChargeFrequencyCount: ").append(toIndentedString(interestChargeFrequencyCount)).append("\n");
    sb.append("    interestRateTerms: ").append(toIndentedString(interestRateTerms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

