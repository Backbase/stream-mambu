/*
 * deposits/transactions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.transactions.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The sorting criteria used for Deposit transactions client directed query
 */
@ApiModel(description = "The sorting criteria used for Deposit transactions client directed query")
@JsonPropertyOrder({
  DepositTransactionSortingCriteria.JSON_PROPERTY_FIELD,
  DepositTransactionSortingCriteria.JSON_PROPERTY_ORDER
})

public class DepositTransactionSortingCriteria {
  /**
   * Contains the field that can be used as sorting selection. Can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId].
   */
  public enum FieldEnum {
    ID("id"),
    
    EXTERNALID("externalId"),
    
    PARENTACCOUNTID("parentAccountId"),
    
    PRODUCTID("productId"),
    
    VALUEDATE("valueDate"),
    
    CREATIONDATE("creationDate"),
    
    AMOUNT("amount"),
    
    BRANCHID("branchId"),
    
    CENTREID("centreId"),
    
    TILLID("tillId"),
    
    FEES_NAME("fees.name"),
    
    TRANSACTIONDETAILS_TRANSACTIONCHANNELID("transactionDetails.transactionChannelId"),
    
    TAXES_TAXRATE("taxes.taxRate"),
    
    TERMS_INTERESTSETTINGS_INTERESTRATE("terms.interestSettings.interestRate"),
    
    TERMS_OVERDRAFTINTERESTSETTINGS_INTERESTRATE("terms.overdraftInterestSettings.interestRate"),
    
    TERMS_OVERDRAFTSETTINGS_OVERDRAFTLIMIT("terms.overdraftSettings.overdraftLimit"),
    
    AFFECTEDAMOUNTS_INTERESTAMOUNT("affectedAmounts.interestAmount"),
    
    AFFECTEDAMOUNTS_FEESAMOUNT("affectedAmounts.feesAmount"),
    
    ACCOUNTBALANCES_TOTALBALANCE("accountBalances.totalBalance");

    private String value;

    FieldEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FieldEnum fromValue(String value) {
      for (FieldEnum b : FieldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FIELD = "field";
  private FieldEnum field;

  /**
   * The sorting order: ASC or DESC. The default order is DESC.
   */
  public enum OrderEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderEnum fromValue(String value) {
      for (OrderEnum b : OrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORDER = "order";
  private OrderEnum order;


  public DepositTransactionSortingCriteria field(FieldEnum field) {
    
    this.field = field;
    return this;
  }

   /**
   * Contains the field that can be used as sorting selection. Can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId].
   * @return field
  **/
  @ApiModelProperty(required = true, value = "Contains the field that can be used as sorting selection. Can be native (one from the provided list) or otherwise can specify a custom field using the format [customFieldSetId].[customFieldId].")
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldEnum getField() {
    return field;
  }


  public void setField(FieldEnum field) {
    this.field = field;
  }


  public DepositTransactionSortingCriteria order(OrderEnum order) {
    
    this.order = order;
    return this;
  }

   /**
   * The sorting order: ASC or DESC. The default order is DESC.
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sorting order: ASC or DESC. The default order is DESC.")
  @JsonProperty(JSON_PROPERTY_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OrderEnum getOrder() {
    return order;
  }


  public void setOrder(OrderEnum order) {
    this.order = order;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositTransactionSortingCriteria depositTransactionSortingCriteria = (DepositTransactionSortingCriteria) o;
    return Objects.equals(this.field, depositTransactionSortingCriteria.field) &&
        Objects.equals(this.order, depositTransactionSortingCriteria.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, order);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositTransactionSortingCriteria {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

