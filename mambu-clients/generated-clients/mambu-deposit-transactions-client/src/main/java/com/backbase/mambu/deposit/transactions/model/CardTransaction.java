/*
 * deposits/transactions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.transactions.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.deposit.transactions.model.CardAcceptor;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * A card transaction entry which will have a corresponding a financial transaction performed.
 */
@ApiModel(description = "A card transaction entry which will have a corresponding a financial transaction performed.")
@JsonPropertyOrder({
  CardTransaction.JSON_PROPERTY_EXTERNAL_REFERENCE_ID,
  CardTransaction.JSON_PROPERTY_AMOUNT,
  CardTransaction.JSON_PROPERTY_ADVICE,
  CardTransaction.JSON_PROPERTY_EXTERNAL_AUTHORIZATION_REFERENCE_ID,
  CardTransaction.JSON_PROPERTY_CARD_ACCEPTOR,
  CardTransaction.JSON_PROPERTY_ENCODED_KEY,
  CardTransaction.JSON_PROPERTY_USER_TRANSACTION_TIME,
  CardTransaction.JSON_PROPERTY_CURRENCY_CODE,
  CardTransaction.JSON_PROPERTY_CARD_TOKEN
})

public class CardTransaction {
  public static final String JSON_PROPERTY_EXTERNAL_REFERENCE_ID = "externalReferenceId";
  private String externalReferenceId;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_ADVICE = "advice";
  private Boolean advice;

  public static final String JSON_PROPERTY_EXTERNAL_AUTHORIZATION_REFERENCE_ID = "externalAuthorizationReferenceId";
  private String externalAuthorizationReferenceId;

  public static final String JSON_PROPERTY_CARD_ACCEPTOR = "cardAcceptor";
  private CardAcceptor cardAcceptor;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_USER_TRANSACTION_TIME = "userTransactionTime";
  private String userTransactionTime;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currencyCode";
  private String currencyCode;

  public static final String JSON_PROPERTY_CARD_TOKEN = "cardToken";
  private String cardToken;


  public CardTransaction externalReferenceId(String externalReferenceId) {
    
    this.externalReferenceId = externalReferenceId;
    return this;
  }

   /**
   * The external reference ID to be used to reference the card transaction in subsequent requests.
   * @return externalReferenceId
  **/
  @ApiModelProperty(required = true, value = "The external reference ID to be used to reference the card transaction in subsequent requests.")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalReferenceId() {
    return externalReferenceId;
  }


  public void setExternalReferenceId(String externalReferenceId) {
    this.externalReferenceId = externalReferenceId;
  }


  public CardTransaction amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of money to be withdrawn in the financial transaction.
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The amount of money to be withdrawn in the financial transaction.")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public CardTransaction advice(Boolean advice) {
    
    this.advice = advice;
    return this;
  }

   /**
   * Whether the given request should be accepted without balance validations.
   * @return advice
  **/
  @ApiModelProperty(required = true, value = "Whether the given request should be accepted without balance validations.")
  @JsonProperty(JSON_PROPERTY_ADVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAdvice() {
    return advice;
  }


  public void setAdvice(Boolean advice) {
    this.advice = advice;
  }


  public CardTransaction externalAuthorizationReferenceId(String externalAuthorizationReferenceId) {
    
    this.externalAuthorizationReferenceId = externalAuthorizationReferenceId;
    return this;
  }

   /**
   * The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.
   * @return externalAuthorizationReferenceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external authorization hold reference ID, which relates this card transaction to a previous authorization hold.")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_AUTHORIZATION_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalAuthorizationReferenceId() {
    return externalAuthorizationReferenceId;
  }


  public void setExternalAuthorizationReferenceId(String externalAuthorizationReferenceId) {
    this.externalAuthorizationReferenceId = externalAuthorizationReferenceId;
  }


  public CardTransaction cardAcceptor(CardAcceptor cardAcceptor) {
    
    this.cardAcceptor = cardAcceptor;
    return this;
  }

   /**
   * Get cardAcceptor
   * @return cardAcceptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CARD_ACCEPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardAcceptor getCardAcceptor() {
    return cardAcceptor;
  }


  public void setCardAcceptor(CardAcceptor cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
  }


   /**
   * The encoded key of the entity, generated, globally unique
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the entity, generated, globally unique")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public CardTransaction userTransactionTime(String userTransactionTime) {
    
    this.userTransactionTime = userTransactionTime;
    return this;
  }

   /**
   * The formatted time at which the user made this card transaction.
   * @return userTransactionTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The formatted time at which the user made this card transaction.")
  @JsonProperty(JSON_PROPERTY_USER_TRANSACTION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserTransactionTime() {
    return userTransactionTime;
  }


  public void setUserTransactionTime(String userTransactionTime) {
    this.userTransactionTime = userTransactionTime;
  }


  public CardTransaction currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO currency code in which the card reversal transaction is posted. The amounts are stored in the base currency, but the transaction can be created with a foreign currency.")
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


   /**
   * The reference token of the card.
   * @return cardToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reference token of the card.")
  @JsonProperty(JSON_PROPERTY_CARD_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardToken() {
    return cardToken;
  }




  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardTransaction cardTransaction = (CardTransaction) o;
    return Objects.equals(this.externalReferenceId, cardTransaction.externalReferenceId) &&
        Objects.equals(this.amount, cardTransaction.amount) &&
        Objects.equals(this.advice, cardTransaction.advice) &&
        Objects.equals(this.externalAuthorizationReferenceId, cardTransaction.externalAuthorizationReferenceId) &&
        Objects.equals(this.cardAcceptor, cardTransaction.cardAcceptor) &&
        Objects.equals(this.encodedKey, cardTransaction.encodedKey) &&
        Objects.equals(this.userTransactionTime, cardTransaction.userTransactionTime) &&
        Objects.equals(this.currencyCode, cardTransaction.currencyCode) &&
        Objects.equals(this.cardToken, cardTransaction.cardToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalReferenceId, amount, advice, externalAuthorizationReferenceId, cardAcceptor, encodedKey, userTransactionTime, currencyCode, cardToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardTransaction {\n");
    sb.append("    externalReferenceId: ").append(toIndentedString(externalReferenceId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    externalAuthorizationReferenceId: ").append(toIndentedString(externalAuthorizationReferenceId)).append("\n");
    sb.append("    cardAcceptor: ").append(toIndentedString(cardAcceptor)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    userTransactionTime: ").append(toIndentedString(userTransactionTime)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

