/*
 * deposits/transactions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.transactions.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * An amount of predefined fee that was applied or paid on an account.
 */
@ApiModel(description = "An amount of predefined fee that was applied or paid on an account.")
@JsonPropertyOrder({
  Fee.JSON_PROPERTY_NAME,
  Fee.JSON_PROPERTY_AMOUNT,
  Fee.JSON_PROPERTY_TRIGGER,
  Fee.JSON_PROPERTY_TAX_AMOUNT,
  Fee.JSON_PROPERTY_PREDEFINED_FEE_KEY
})

public class Fee {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  /**
   * Shows the event that will trigger a fee
   */
  public enum TriggerEnum {
    MANUAL("MANUAL"),
    
    DISBURSEMENT("DISBURSEMENT"),
    
    CAPITALIZED_DISBURSEMENT("CAPITALIZED_DISBURSEMENT"),
    
    UPFRONT_DISBURSEMENT("UPFRONT_DISBURSEMENT"),
    
    LATE_REPAYMENT("LATE_REPAYMENT"),
    
    MONTHLY_FEE("MONTHLY_FEE"),
    
    PAYMENT_DUE("PAYMENT_DUE"),
    
    PAYMENT_DUE_APPLIED_ON_DUE_DATES("PAYMENT_DUE_APPLIED_ON_DUE_DATES"),
    
    ARBITRARY("ARBITRARY");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRIGGER = "trigger";
  private TriggerEnum trigger;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private BigDecimal taxAmount;

  public static final String JSON_PROPERTY_PREDEFINED_FEE_KEY = "predefinedFeeKey";
  private String predefinedFeeKey;


   /**
   * The name of the predefined fee
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the predefined fee")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }




  public Fee amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the fee that was applied/paid in the transaction for the given predefined fee.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of the fee that was applied/paid in the transaction for the given predefined fee.")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


   /**
   * Shows the event that will trigger a fee
   * @return trigger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shows the event that will trigger a fee")
  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TriggerEnum getTrigger() {
    return trigger;
  }




  public Fee taxAmount(BigDecimal taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * The amount of the taxes on fee that was applied/paid in the transaction.
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of the taxes on fee that was applied/paid in the transaction.")
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Fee predefinedFeeKey(String predefinedFeeKey) {
    
    this.predefinedFeeKey = predefinedFeeKey;
    return this;
  }

   /**
   * The encoded key of the predefined fee, auto generated, unique
   * @return predefinedFeeKey
  **/
  @ApiModelProperty(required = true, value = "The encoded key of the predefined fee, auto generated, unique")
  @JsonProperty(JSON_PROPERTY_PREDEFINED_FEE_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPredefinedFeeKey() {
    return predefinedFeeKey;
  }


  public void setPredefinedFeeKey(String predefinedFeeKey) {
    this.predefinedFeeKey = predefinedFeeKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fee fee = (Fee) o;
    return Objects.equals(this.name, fee.name) &&
        Objects.equals(this.amount, fee.amount) &&
        Objects.equals(this.trigger, fee.trigger) &&
        Objects.equals(this.taxAmount, fee.taxAmount) &&
        Objects.equals(this.predefinedFeeKey, fee.predefinedFeeKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, amount, trigger, taxAmount, predefinedFeeKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fee {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    predefinedFeeKey: ").append(toIndentedString(predefinedFeeKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

