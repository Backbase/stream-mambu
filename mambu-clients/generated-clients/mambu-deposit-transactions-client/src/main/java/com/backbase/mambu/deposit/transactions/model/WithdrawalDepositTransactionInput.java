/*
 * deposits/transactions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.transactions.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.deposit.transactions.model.TransactionDetailsInput;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Represents the input for a withdrawal transaction.
 */
@ApiModel(description = "Represents the input for a withdrawal transaction.")
@JsonPropertyOrder({
  WithdrawalDepositTransactionInput.JSON_PROPERTY_TRANSACTION_DETAILS,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_AMOUNT,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_NOTES,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_PAYMENT_ORDER_ID,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_EXTERNAL_ID,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_BOOKING_DATE,
  WithdrawalDepositTransactionInput.JSON_PROPERTY_VALUE_DATE
})

public class WithdrawalDepositTransactionInput {
  public static final String JSON_PROPERTY_TRANSACTION_DETAILS = "transactionDetails";
  private TransactionDetailsInput transactionDetails;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_PAYMENT_ORDER_ID = "paymentOrderId";
  private String paymentOrderId;

  public static final String JSON_PROPERTY_EXTERNAL_ID = "externalId";
  private String externalId;

  public static final String JSON_PROPERTY_BOOKING_DATE = "bookingDate";
  private OffsetDateTime bookingDate;

  public static final String JSON_PROPERTY_VALUE_DATE = "valueDate";
  private OffsetDateTime valueDate;


  public WithdrawalDepositTransactionInput transactionDetails(TransactionDetailsInput transactionDetails) {
    
    this.transactionDetails = transactionDetails;
    return this;
  }

   /**
   * Get transactionDetails
   * @return transactionDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionDetailsInput getTransactionDetails() {
    return transactionDetails;
  }


  public void setTransactionDetails(TransactionDetailsInput transactionDetails) {
    this.transactionDetails = transactionDetails;
  }


  public WithdrawalDepositTransactionInput amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount to withdraw from account
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The amount to withdraw from account")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public WithdrawalDepositTransactionInput notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Extra notes about this deposit transaction
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra notes about this deposit transaction")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public WithdrawalDepositTransactionInput paymentOrderId(String paymentOrderId) {
    
    this.paymentOrderId = paymentOrderId;
    return this;
  }

   /**
   * The payment order id of the withdrawal transaction, customizable
   * @return paymentOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment order id of the withdrawal transaction, customizable")
  @JsonProperty(JSON_PROPERTY_PAYMENT_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentOrderId() {
    return paymentOrderId;
  }


  public void setPaymentOrderId(String paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
  }


  public WithdrawalDepositTransactionInput externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * The external id of the withdrawal transaction, customizable, unique
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external id of the withdrawal transaction, customizable, unique")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public WithdrawalDepositTransactionInput bookingDate(OffsetDateTime bookingDate) {
    
    this.bookingDate = bookingDate;
    return this;
  }

   /**
   * The date of the withdrawal when the transaction is logged into accounting. If not specified it is considered the value date
   * @return bookingDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date of the withdrawal when the transaction is logged into accounting. If not specified it is considered the value date")
  @JsonProperty(JSON_PROPERTY_BOOKING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getBookingDate() {
    return bookingDate;
  }


  public void setBookingDate(OffsetDateTime bookingDate) {
    this.bookingDate = bookingDate;
  }


  public WithdrawalDepositTransactionInput valueDate(OffsetDateTime valueDate) {
    
    this.valueDate = valueDate;
    return this;
  }

   /**
   * The entry date of the withdrawal. If not specified it is considered the current date (as Organization Time)
   * @return valueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The entry date of the withdrawal. If not specified it is considered the current date (as Organization Time)")
  @JsonProperty(JSON_PROPERTY_VALUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getValueDate() {
    return valueDate;
  }


  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WithdrawalDepositTransactionInput withdrawalDepositTransactionInput = (WithdrawalDepositTransactionInput) o;
    return Objects.equals(this.transactionDetails, withdrawalDepositTransactionInput.transactionDetails) &&
        Objects.equals(this.amount, withdrawalDepositTransactionInput.amount) &&
        Objects.equals(this.notes, withdrawalDepositTransactionInput.notes) &&
        Objects.equals(this.paymentOrderId, withdrawalDepositTransactionInput.paymentOrderId) &&
        Objects.equals(this.externalId, withdrawalDepositTransactionInput.externalId) &&
        Objects.equals(this.bookingDate, withdrawalDepositTransactionInput.bookingDate) &&
        Objects.equals(this.valueDate, withdrawalDepositTransactionInput.valueDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionDetails, amount, notes, paymentOrderId, externalId, bookingDate, valueDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WithdrawalDepositTransactionInput {\n");
    sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentOrderId: ").append(toIndentedString(paymentOrderId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

