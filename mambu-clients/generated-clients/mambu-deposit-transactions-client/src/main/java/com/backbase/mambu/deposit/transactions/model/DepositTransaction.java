/*
 * deposits/transactions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.deposit.transactions.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.deposit.transactions.model.CardTransaction;
import com.backbase.mambu.deposit.transactions.model.DepositAffectedAmounts;
import com.backbase.mambu.deposit.transactions.model.DepositTaxes;
import com.backbase.mambu.deposit.transactions.model.DepositTerms;
import com.backbase.mambu.deposit.transactions.model.DepositTransactionBalances;
import com.backbase.mambu.deposit.transactions.model.Fee;
import com.backbase.mambu.deposit.transactions.model.TransactionDetails;
import com.backbase.mambu.deposit.transactions.model.TransferDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Represents the action performed on an Deposit Account after which the account&#39;s amount changes its value.
 */
@ApiModel(description = "Represents the action performed on an Deposit Account after which the account's amount changes its value.")
@JsonPropertyOrder({
  DepositTransaction.JSON_PROPERTY_MIGRATION_EVENT_KEY,
  DepositTransaction.JSON_PROPERTY_TRANSACTION_DETAILS,
  DepositTransaction.JSON_PROPERTY_FEES,
  DepositTransaction.JSON_PROPERTY_NOTES,
  DepositTransaction.JSON_PROPERTY_AFFECTED_AMOUNTS,
  DepositTransaction.JSON_PROPERTY_CARD_TRANSACTION,
  DepositTransaction.JSON_PROPERTY_TAXES,
  DepositTransaction.JSON_PROPERTY_TILL_KEY,
  DepositTransaction.JSON_PROPERTY_ADJUSTMENT_TRANSACTION_KEY,
  DepositTransaction.JSON_PROPERTY_TYPE,
  DepositTransaction.JSON_PROPERTY_BRANCH_KEY,
  DepositTransaction.JSON_PROPERTY_TERMS,
  DepositTransaction.JSON_PROPERTY_TRANSFER_DETAILS,
  DepositTransaction.JSON_PROPERTY_PAYMENT_ORDER_ID,
  DepositTransaction.JSON_PROPERTY_ENCODED_KEY,
  DepositTransaction.JSON_PROPERTY_ID,
  DepositTransaction.JSON_PROPERTY_ORIGINAL_TRANSACTION_KEY,
  DepositTransaction.JSON_PROPERTY_AMOUNT,
  DepositTransaction.JSON_PROPERTY_CENTRE_KEY,
  DepositTransaction.JSON_PROPERTY_EXTERNAL_ID,
  DepositTransaction.JSON_PROPERTY_VALUE_DATE,
  DepositTransaction.JSON_PROPERTY_CREATION_DATE,
  DepositTransaction.JSON_PROPERTY_USER_KEY,
  DepositTransaction.JSON_PROPERTY_PARENT_ACCOUNT_KEY,
  DepositTransaction.JSON_PROPERTY_ACCOUNT_BALANCES,
  DepositTransaction.JSON_PROPERTY_BOOKING_DATE,
  DepositTransaction.JSON_PROPERTY_CURRENCY_CODE
})

public class DepositTransaction {
  public static final String JSON_PROPERTY_MIGRATION_EVENT_KEY = "migrationEventKey";
  private String migrationEventKey;

  public static final String JSON_PROPERTY_TRANSACTION_DETAILS = "transactionDetails";
  private TransactionDetails transactionDetails;

  public static final String JSON_PROPERTY_FEES = "fees";
  private List<Fee> fees = null;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_AFFECTED_AMOUNTS = "affectedAmounts";
  private DepositAffectedAmounts affectedAmounts;

  public static final String JSON_PROPERTY_CARD_TRANSACTION = "cardTransaction";
  private CardTransaction cardTransaction;

  public static final String JSON_PROPERTY_TAXES = "taxes";
  private DepositTaxes taxes;

  public static final String JSON_PROPERTY_TILL_KEY = "tillKey";
  private String tillKey;

  public static final String JSON_PROPERTY_ADJUSTMENT_TRANSACTION_KEY = "adjustmentTransactionKey";
  private String adjustmentTransactionKey;

  /**
   * The type of the deposit transaction
   */
  public enum TypeEnum {
    IMPORT("IMPORT"),
    
    WRITE_OFF("WRITE_OFF"),
    
    WRITE_OFF_ADJUSTMENT("WRITE_OFF_ADJUSTMENT"),
    
    DEPOSIT("DEPOSIT"),
    
    ADJUSTMENT("ADJUSTMENT"),
    
    WITHDRAWAL("WITHDRAWAL"),
    
    WITHDRAWAL_ADJUSTMENT("WITHDRAWAL_ADJUSTMENT"),
    
    CARD_TRANSACTION_REVERSAL("CARD_TRANSACTION_REVERSAL"),
    
    TRANSFER("TRANSFER"),
    
    TRANSFER_ADJUSTMENT("TRANSFER_ADJUSTMENT"),
    
    FEE_APPLIED("FEE_APPLIED"),
    
    FEE_ADJUSTED("FEE_ADJUSTED"),
    
    FEES_DUE_REDUCED("FEES_DUE_REDUCED"),
    
    INTEREST_APPLIED("INTEREST_APPLIED"),
    
    INTEREST_APPLIED_ADJUSTMENT("INTEREST_APPLIED_ADJUSTMENT"),
    
    FEE_REDUCTION_ADJUSTMENT("FEE_REDUCTION_ADJUSTMENT"),
    
    WITHHOLDING_TAX("WITHHOLDING_TAX"),
    
    WITHHOLDING_TAX_ADJUSTMENT("WITHHOLDING_TAX_ADJUSTMENT"),
    
    INTEREST_RATE_CHANGED("INTEREST_RATE_CHANGED"),
    
    OVERDRAFT_INTEREST_RATE_CHANGED("OVERDRAFT_INTEREST_RATE_CHANGED"),
    
    OVERDRAFT_LIMIT_CHANGED("OVERDRAFT_LIMIT_CHANGED"),
    
    BRANCH_CHANGED("BRANCH_CHANGED"),
    
    LOAN_FUNDED("LOAN_FUNDED"),
    
    LOAN_FUNDED_ADJUSTMENT("LOAN_FUNDED_ADJUSTMENT"),
    
    LOAN_REPAID("LOAN_REPAID"),
    
    LOAN_REPAID_ADJUSTMENT("LOAN_REPAID_ADJUSTMENT"),
    
    LOAN_FRACTION_BOUGHT("LOAN_FRACTION_BOUGHT"),
    
    LOAN_FRACTION_BOUGHT_ADJUSTMENT("LOAN_FRACTION_BOUGHT_ADJUSTMENT"),
    
    LOAN_FRACTION_SOLD("LOAN_FRACTION_SOLD"),
    
    LOAN_FRACTION_SOLD_ADJUSTMENT("LOAN_FRACTION_SOLD_ADJUSTMENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_BRANCH_KEY = "branchKey";
  private String branchKey;

  public static final String JSON_PROPERTY_TERMS = "terms";
  private DepositTerms terms;

  public static final String JSON_PROPERTY_TRANSFER_DETAILS = "transferDetails";
  private TransferDetails transferDetails;

  public static final String JSON_PROPERTY_PAYMENT_ORDER_ID = "paymentOrderId";
  private String paymentOrderId;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_ORIGINAL_TRANSACTION_KEY = "originalTransactionKey";
  private String originalTransactionKey;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_CENTRE_KEY = "centreKey";
  private String centreKey;

  public static final String JSON_PROPERTY_EXTERNAL_ID = "externalId";
  private String externalId;

  public static final String JSON_PROPERTY_VALUE_DATE = "valueDate";
  private OffsetDateTime valueDate;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_USER_KEY = "userKey";
  private String userKey;

  public static final String JSON_PROPERTY_PARENT_ACCOUNT_KEY = "parentAccountKey";
  private String parentAccountKey;

  public static final String JSON_PROPERTY_ACCOUNT_BALANCES = "accountBalances";
  private DepositTransactionBalances accountBalances;

  public static final String JSON_PROPERTY_BOOKING_DATE = "bookingDate";
  private OffsetDateTime bookingDate;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currencyCode";
  private String currencyCode;


  public DepositTransaction migrationEventKey(String migrationEventKey) {
    
    this.migrationEventKey = migrationEventKey;
    return this;
  }

   /**
   * The migration event encoded key associated with this deposit account. If this account was imported, track which &#39;migration event&#39; they came from
   * @return migrationEventKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The migration event encoded key associated with this deposit account. If this account was imported, track which 'migration event' they came from")
  @JsonProperty(JSON_PROPERTY_MIGRATION_EVENT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMigrationEventKey() {
    return migrationEventKey;
  }


  public void setMigrationEventKey(String migrationEventKey) {
    this.migrationEventKey = migrationEventKey;
  }


  public DepositTransaction transactionDetails(TransactionDetails transactionDetails) {
    
    this.transactionDetails = transactionDetails;
    return this;
  }

   /**
   * Get transactionDetails
   * @return transactionDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionDetails getTransactionDetails() {
    return transactionDetails;
  }


  public void setTransactionDetails(TransactionDetails transactionDetails) {
    this.transactionDetails = transactionDetails;
  }


   /**
   * All the amounts that have been applied or paid within this transaction and involved predefined fees
   * @return fees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "All the amounts that have been applied or paid within this transaction and involved predefined fees")
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Fee> getFees() {
    return fees;
  }




  public DepositTransaction notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Extra notes about this deposit transaction
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra notes about this deposit transaction")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public DepositTransaction affectedAmounts(DepositAffectedAmounts affectedAmounts) {
    
    this.affectedAmounts = affectedAmounts;
    return this;
  }

   /**
   * Get affectedAmounts
   * @return affectedAmounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AFFECTED_AMOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DepositAffectedAmounts getAffectedAmounts() {
    return affectedAmounts;
  }


  public void setAffectedAmounts(DepositAffectedAmounts affectedAmounts) {
    this.affectedAmounts = affectedAmounts;
  }


  public DepositTransaction cardTransaction(CardTransaction cardTransaction) {
    
    this.cardTransaction = cardTransaction;
    return this;
  }

   /**
   * Get cardTransaction
   * @return cardTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CARD_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardTransaction getCardTransaction() {
    return cardTransaction;
  }


  public void setCardTransaction(CardTransaction cardTransaction) {
    this.cardTransaction = cardTransaction;
  }


  public DepositTransaction taxes(DepositTaxes taxes) {
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DepositTaxes getTaxes() {
    return taxes;
  }


  public void setTaxes(DepositTaxes taxes) {
    this.taxes = taxes;
  }


  public DepositTransaction tillKey(String tillKey) {
    
    this.tillKey = tillKey;
    return this;
  }

   /**
   * The till key associated with this transaction
   * @return tillKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The till key associated with this transaction")
  @JsonProperty(JSON_PROPERTY_TILL_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTillKey() {
    return tillKey;
  }


  public void setTillKey(String tillKey) {
    this.tillKey = tillKey;
  }


  public DepositTransaction adjustmentTransactionKey(String adjustmentTransactionKey) {
    
    this.adjustmentTransactionKey = adjustmentTransactionKey;
    return this;
  }

   /**
   * The key of the deposit transaction where the adjustment for this transaction was made (if any adjustment was involved)
   * @return adjustmentTransactionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the deposit transaction where the adjustment for this transaction was made (if any adjustment was involved)")
  @JsonProperty(JSON_PROPERTY_ADJUSTMENT_TRANSACTION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdjustmentTransactionKey() {
    return adjustmentTransactionKey;
  }


  public void setAdjustmentTransactionKey(String adjustmentTransactionKey) {
    this.adjustmentTransactionKey = adjustmentTransactionKey;
  }


  public DepositTransaction type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the deposit transaction
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the deposit transaction")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


   /**
   * The branch where the transaction was performed
   * @return branchKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The branch where the transaction was performed")
  @JsonProperty(JSON_PROPERTY_BRANCH_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBranchKey() {
    return branchKey;
  }




  public DepositTransaction terms(DepositTerms terms) {
    
    this.terms = terms;
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TERMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DepositTerms getTerms() {
    return terms;
  }


  public void setTerms(DepositTerms terms) {
    this.terms = terms;
  }


  public DepositTransaction transferDetails(TransferDetails transferDetails) {
    
    this.transferDetails = transferDetails;
    return this;
  }

   /**
   * Get transferDetails
   * @return transferDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSFER_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransferDetails getTransferDetails() {
    return transferDetails;
  }


  public void setTransferDetails(TransferDetails transferDetails) {
    this.transferDetails = transferDetails;
  }


  public DepositTransaction paymentOrderId(String paymentOrderId) {
    
    this.paymentOrderId = paymentOrderId;
    return this;
  }

   /**
   * The payment order id of the deposit transaction, customizable
   * @return paymentOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment order id of the deposit transaction, customizable")
  @JsonProperty(JSON_PROPERTY_PAYMENT_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentOrderId() {
    return paymentOrderId;
  }


  public void setPaymentOrderId(String paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
  }


   /**
   * The encoded key of the deposit transaction, auto generated, unique
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the deposit transaction, auto generated, unique")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public DepositTransaction id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the deposit transaction, auto generated, unique
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the deposit transaction, auto generated, unique")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public DepositTransaction originalTransactionKey(String originalTransactionKey) {
    
    this.originalTransactionKey = originalTransactionKey;
    return this;
  }

   /**
   * The encodedKey of the transaction that was adjusted as part of this one. Available only for adjustment transactions
   * @return originalTransactionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encodedKey of the transaction that was adjusted as part of this one. Available only for adjustment transactions")
  @JsonProperty(JSON_PROPERTY_ORIGINAL_TRANSACTION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalTransactionKey() {
    return originalTransactionKey;
  }


  public void setOriginalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
  }


  public DepositTransaction amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * How much was added/removed in account
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How much was added/removed in account")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


   /**
   * The center where the transaction was performed
   * @return centreKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The center where the transaction was performed")
  @JsonProperty(JSON_PROPERTY_CENTRE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCentreKey() {
    return centreKey;
  }




  public DepositTransaction externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * The external id of the deposit transaction, customizable, unique
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external id of the deposit transaction, customizable, unique")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public DepositTransaction valueDate(OffsetDateTime valueDate) {
    
    this.valueDate = valueDate;
    return this;
  }

   /**
   * Date of the entry (eg date of repayment or disbursal, etc.) (as Organization Time)
   * @return valueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "Date of the entry (eg date of repayment or disbursal, etc.) (as Organization Time)")
  @JsonProperty(JSON_PROPERTY_VALUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getValueDate() {
    return valueDate;
  }


  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }


   /**
   * The date when this deposit transaction was created
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date when this deposit transaction was created")
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }




  public DepositTransaction userKey(String userKey) {
    
    this.userKey = userKey;
    return this;
  }

   /**
   * The person that performed the transaction
   * @return userKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The person that performed the transaction")
  @JsonProperty(JSON_PROPERTY_USER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserKey() {
    return userKey;
  }


  public void setUserKey(String userKey) {
    this.userKey = userKey;
  }


  public DepositTransaction parentAccountKey(String parentAccountKey) {
    
    this.parentAccountKey = parentAccountKey;
    return this;
  }

   /**
   * The key of the parent deposit account
   * @return parentAccountKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key of the parent deposit account")
  @JsonProperty(JSON_PROPERTY_PARENT_ACCOUNT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentAccountKey() {
    return parentAccountKey;
  }


  public void setParentAccountKey(String parentAccountKey) {
    this.parentAccountKey = parentAccountKey;
  }


  public DepositTransaction accountBalances(DepositTransactionBalances accountBalances) {
    
    this.accountBalances = accountBalances;
    return this;
  }

   /**
   * Get accountBalances
   * @return accountBalances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_BALANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DepositTransactionBalances getAccountBalances() {
    return accountBalances;
  }


  public void setAccountBalances(DepositTransactionBalances accountBalances) {
    this.accountBalances = accountBalances;
  }


  public DepositTransaction bookingDate(OffsetDateTime bookingDate) {
    
    this.bookingDate = bookingDate;
    return this;
  }

   /**
   * The date when corresponding JE is booked (as Organization Time)
   * @return bookingDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The date when corresponding JE is booked (as Organization Time)")
  @JsonProperty(JSON_PROPERTY_BOOKING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getBookingDate() {
    return bookingDate;
  }


  public void setBookingDate(OffsetDateTime bookingDate) {
    this.bookingDate = bookingDate;
  }


  public DepositTransaction currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency in which this transaction was posted
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency in which this transaction was posted")
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositTransaction depositTransaction = (DepositTransaction) o;
    return Objects.equals(this.migrationEventKey, depositTransaction.migrationEventKey) &&
        Objects.equals(this.transactionDetails, depositTransaction.transactionDetails) &&
        Objects.equals(this.fees, depositTransaction.fees) &&
        Objects.equals(this.notes, depositTransaction.notes) &&
        Objects.equals(this.affectedAmounts, depositTransaction.affectedAmounts) &&
        Objects.equals(this.cardTransaction, depositTransaction.cardTransaction) &&
        Objects.equals(this.taxes, depositTransaction.taxes) &&
        Objects.equals(this.tillKey, depositTransaction.tillKey) &&
        Objects.equals(this.adjustmentTransactionKey, depositTransaction.adjustmentTransactionKey) &&
        Objects.equals(this.type, depositTransaction.type) &&
        Objects.equals(this.branchKey, depositTransaction.branchKey) &&
        Objects.equals(this.terms, depositTransaction.terms) &&
        Objects.equals(this.transferDetails, depositTransaction.transferDetails) &&
        Objects.equals(this.paymentOrderId, depositTransaction.paymentOrderId) &&
        Objects.equals(this.encodedKey, depositTransaction.encodedKey) &&
        Objects.equals(this.id, depositTransaction.id) &&
        Objects.equals(this.originalTransactionKey, depositTransaction.originalTransactionKey) &&
        Objects.equals(this.amount, depositTransaction.amount) &&
        Objects.equals(this.centreKey, depositTransaction.centreKey) &&
        Objects.equals(this.externalId, depositTransaction.externalId) &&
        Objects.equals(this.valueDate, depositTransaction.valueDate) &&
        Objects.equals(this.creationDate, depositTransaction.creationDate) &&
        Objects.equals(this.userKey, depositTransaction.userKey) &&
        Objects.equals(this.parentAccountKey, depositTransaction.parentAccountKey) &&
        Objects.equals(this.accountBalances, depositTransaction.accountBalances) &&
        Objects.equals(this.bookingDate, depositTransaction.bookingDate) &&
        Objects.equals(this.currencyCode, depositTransaction.currencyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(migrationEventKey, transactionDetails, fees, notes, affectedAmounts, cardTransaction, taxes, tillKey, adjustmentTransactionKey, type, branchKey, terms, transferDetails, paymentOrderId, encodedKey, id, originalTransactionKey, amount, centreKey, externalId, valueDate, creationDate, userKey, parentAccountKey, accountBalances, bookingDate, currencyCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositTransaction {\n");
    sb.append("    migrationEventKey: ").append(toIndentedString(migrationEventKey)).append("\n");
    sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    affectedAmounts: ").append(toIndentedString(affectedAmounts)).append("\n");
    sb.append("    cardTransaction: ").append(toIndentedString(cardTransaction)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    tillKey: ").append(toIndentedString(tillKey)).append("\n");
    sb.append("    adjustmentTransactionKey: ").append(toIndentedString(adjustmentTransactionKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    branchKey: ").append(toIndentedString(branchKey)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    transferDetails: ").append(toIndentedString(transferDetails)).append("\n");
    sb.append("    paymentOrderId: ").append(toIndentedString(paymentOrderId)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originalTransactionKey: ").append(toIndentedString(originalTransactionKey)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    centreKey: ").append(toIndentedString(centreKey)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("    parentAccountKey: ").append(toIndentedString(parentAccountKey)).append("\n");
    sb.append("    accountBalances: ").append(toIndentedString(accountBalances)).append("\n");
    sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

