/*
 * clients
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.clients.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Holds information regarding the documents uploaded as attachments
 */
@ApiModel(description = "Holds information regarding the documents uploaded as attachments")
@JsonPropertyOrder({
  Document.JSON_PROPERTY_OWNER_TYPE,
  Document.JSON_PROPERTY_FILE_NAME,
  Document.JSON_PROPERTY_NOTES,
  Document.JSON_PROPERTY_LAST_MODIFIED_DATE,
  Document.JSON_PROPERTY_CREATION_DATE,
  Document.JSON_PROPERTY_TYPE,
  Document.JSON_PROPERTY_OWNER_KEY,
  Document.JSON_PROPERTY_FILE_SIZE,
  Document.JSON_PROPERTY_NAME,
  Document.JSON_PROPERTY_ENCODED_KEY,
  Document.JSON_PROPERTY_LOCATION,
  Document.JSON_PROPERTY_ID
})

public class Document {
  /**
   * Determines the owner type of the document
   */
  public enum OwnerTypeEnum {
    CLIENT("CLIENT"),
    
    GROUP("GROUP"),
    
    LOAN_PRODUCT("LOAN_PRODUCT"),
    
    SAVINGS_PRODUCT("SAVINGS_PRODUCT"),
    
    CENTRE("CENTRE"),
    
    BRANCH("BRANCH"),
    
    USER("USER"),
    
    LOAN_ACCOUNT("LOAN_ACCOUNT"),
    
    DEPOSIT_ACCOUNT("DEPOSIT_ACCOUNT"),
    
    ID_DOCUMENT("ID_DOCUMENT"),
    
    LINE_OF_CREDIT("LINE_OF_CREDIT"),
    
    GL_JOURNAL_ENTRY("GL_JOURNAL_ENTRY");

    private String value;

    OwnerTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OwnerTypeEnum fromValue(String value) {
      for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OWNER_TYPE = "ownerType";
  private OwnerTypeEnum ownerType;

  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private String fileName;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_LAST_MODIFIED_DATE = "lastModifiedDate";
  private OffsetDateTime lastModifiedDate;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_OWNER_KEY = "ownerKey";
  private String ownerKey;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  private Long fileSize;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;


   /**
   * Determines the owner type of the document
   * @return ownerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the owner type of the document")
  @JsonProperty(JSON_PROPERTY_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OwnerTypeEnum getOwnerType() {
    return ownerType;
  }




  public Document fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * The original file name of the document
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original file name of the document")
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Document notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Detailed notes about the document
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detailed notes about the document")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


   /**
   * The last modified date of the document, stored as UTC
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The last modified date of the document, stored as UTC")
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }




   /**
   * The creation date of the document, stored as UTC
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "The creation date of the document, stored as UTC")
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }




  public Document type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The extension of the document
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The extension of the document")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


   /**
   * Represents the holder of this document. If null, means nobody is the owner of this document
   * @return ownerKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the holder of this document. If null, means nobody is the owner of this document")
  @JsonProperty(JSON_PROPERTY_OWNER_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwnerKey() {
    return ownerKey;
  }




  public Document fileSize(Long fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * The file size of the document
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The file size of the document")
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFileSize() {
    return fileSize;
  }


  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }


  public Document name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the document
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the document")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


   /**
   * The document encodedKey
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The document encodedKey")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public Document location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Location where the document can be found, eg /myfiles/mypicture.jpeg
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location where the document can be found, eg /myfiles/mypicture.jpeg")
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public Document id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * The document id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The document id")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.ownerType, document.ownerType) &&
        Objects.equals(this.fileName, document.fileName) &&
        Objects.equals(this.notes, document.notes) &&
        Objects.equals(this.lastModifiedDate, document.lastModifiedDate) &&
        Objects.equals(this.creationDate, document.creationDate) &&
        Objects.equals(this.type, document.type) &&
        Objects.equals(this.ownerKey, document.ownerKey) &&
        Objects.equals(this.fileSize, document.fileSize) &&
        Objects.equals(this.name, document.name) &&
        Objects.equals(this.encodedKey, document.encodedKey) &&
        Objects.equals(this.location, document.location) &&
        Objects.equals(this.id, document.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerType, fileName, notes, lastModifiedDate, creationDate, type, ownerKey, fileSize, name, encodedKey, location, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ownerKey: ").append(toIndentedString(ownerKey)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

