/*
 * loans
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loans.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.
 */
@ApiModel(description = "For fixed term loans there is the possibility to define a payment plan. A payment plan consists of multiple periodic payments. This class holds information about a periodic payment.")
@JsonPropertyOrder({
  PeriodicPayment.JSON_PROPERTY_TO_INSTALLMENT,
  PeriodicPayment.JSON_PROPERTY_ENCODED_KEY,
  PeriodicPayment.JSON_PROPERTY_AMOUNT
})

public class PeriodicPayment {
  public static final String JSON_PROPERTY_TO_INSTALLMENT = "toInstallment";
  private Integer toInstallment;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;


  public PeriodicPayment toInstallment(Integer toInstallment) {
    
    this.toInstallment = toInstallment;
    return this;
  }

   /**
   * The installment&#39;s position up to which the PMT will be used
   * @return toInstallment
  **/
  @ApiModelProperty(required = true, value = "The installment's position up to which the PMT will be used")
  @JsonProperty(JSON_PROPERTY_TO_INSTALLMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getToInstallment() {
    return toInstallment;
  }


  public void setToInstallment(Integer toInstallment) {
    this.toInstallment = toInstallment;
  }


   /**
   * The encoded key of the periodic payment, auto generated, unique.
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the periodic payment, auto generated, unique.")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public PeriodicPayment amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The PMT value used in periodic payment
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The PMT value used in periodic payment")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodicPayment periodicPayment = (PeriodicPayment) o;
    return Objects.equals(this.toInstallment, periodicPayment.toInstallment) &&
        Objects.equals(this.encodedKey, periodicPayment.encodedKey) &&
        Objects.equals(this.amount, periodicPayment.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toInstallment, encodedKey, amount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodicPayment {\n");
    sb.append("    toInstallment: ").append(toIndentedString(toInstallment)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

