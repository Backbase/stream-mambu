/*
 * loans
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loans.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The account arrears settings, holds the required information for the arrears settings of an account.
 */
@ApiModel(description = "The account arrears settings, holds the required information for the arrears settings of an account.")
@JsonPropertyOrder({
  AccountArrearsSettings.JSON_PROPERTY_MONTHLY_TOLERANCE_DAY,
  AccountArrearsSettings.JSON_PROPERTY_NON_WORKING_DAYS_METHOD,
  AccountArrearsSettings.JSON_PROPERTY_TOLERANCE_PERIOD,
  AccountArrearsSettings.JSON_PROPERTY_ENCODED_KEY,
  AccountArrearsSettings.JSON_PROPERTY_TOLERANCE_CALCULATION_METHOD,
  AccountArrearsSettings.JSON_PROPERTY_DATE_CALCULATION_METHOD
})

public class AccountArrearsSettings {
  public static final String JSON_PROPERTY_MONTHLY_TOLERANCE_DAY = "monthlyToleranceDay";
  private Integer monthlyToleranceDay;

  /**
   * Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears
   */
  public enum NonWorkingDaysMethodEnum {
    INCLUDED("INCLUDED"),
    
    EXCLUDED("EXCLUDED");

    private String value;

    NonWorkingDaysMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NonWorkingDaysMethodEnum fromValue(String value) {
      for (NonWorkingDaysMethodEnum b : NonWorkingDaysMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NON_WORKING_DAYS_METHOD = "nonWorkingDaysMethod";
  private NonWorkingDaysMethodEnum nonWorkingDaysMethod;

  public static final String JSON_PROPERTY_TOLERANCE_PERIOD = "tolerancePeriod";
  private Integer tolerancePeriod;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  /**
   * Defines the tolerance calculation method
   */
  public enum ToleranceCalculationMethodEnum {
    ARREARS_TOLERANCE_PERIOD("ARREARS_TOLERANCE_PERIOD"),
    
    MONTHLY_ARREARS_TOLERANCE_DAY("MONTHLY_ARREARS_TOLERANCE_DAY");

    private String value;

    ToleranceCalculationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ToleranceCalculationMethodEnum fromValue(String value) {
      for (ToleranceCalculationMethodEnum b : ToleranceCalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TOLERANCE_CALCULATION_METHOD = "toleranceCalculationMethod";
  private ToleranceCalculationMethodEnum toleranceCalculationMethod;

  /**
   * The arrears date calculation method.
   */
  public enum DateCalculationMethodEnum {
    ACCOUNT_FIRST_WENT_TO_ARREARS("ACCOUNT_FIRST_WENT_TO_ARREARS"),
    
    LAST_LATE_REPAYMENT("LAST_LATE_REPAYMENT");

    private String value;

    DateCalculationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DateCalculationMethodEnum fromValue(String value) {
      for (DateCalculationMethodEnum b : DateCalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATE_CALCULATION_METHOD = "dateCalculationMethod";
  private DateCalculationMethodEnum dateCalculationMethod;


  public AccountArrearsSettings monthlyToleranceDay(Integer monthlyToleranceDay) {
    
    this.monthlyToleranceDay = monthlyToleranceDay;
    return this;
  }

   /**
   * Defines monthly arrears tolerance day value.
   * @return monthlyToleranceDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines monthly arrears tolerance day value.")
  @JsonProperty(JSON_PROPERTY_MONTHLY_TOLERANCE_DAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMonthlyToleranceDay() {
    return monthlyToleranceDay;
  }


  public void setMonthlyToleranceDay(Integer monthlyToleranceDay) {
    this.monthlyToleranceDay = monthlyToleranceDay;
  }


  public AccountArrearsSettings nonWorkingDaysMethod(NonWorkingDaysMethodEnum nonWorkingDaysMethod) {
    
    this.nonWorkingDaysMethod = nonWorkingDaysMethod;
    return this;
  }

   /**
   * Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears
   * @return nonWorkingDaysMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shows whether the non working days are taken in consideration or not when applying penaltees/late fees or when setting an account into arrears")
  @JsonProperty(JSON_PROPERTY_NON_WORKING_DAYS_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NonWorkingDaysMethodEnum getNonWorkingDaysMethod() {
    return nonWorkingDaysMethod;
  }


  public void setNonWorkingDaysMethod(NonWorkingDaysMethodEnum nonWorkingDaysMethod) {
    this.nonWorkingDaysMethod = nonWorkingDaysMethod;
  }


  public AccountArrearsSettings tolerancePeriod(Integer tolerancePeriod) {
    
    this.tolerancePeriod = tolerancePeriod;
    return this;
  }

   /**
   * Defines the arrears tolerance period value.
   * @return tolerancePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the arrears tolerance period value.")
  @JsonProperty(JSON_PROPERTY_TOLERANCE_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTolerancePeriod() {
    return tolerancePeriod;
  }


  public void setTolerancePeriod(Integer tolerancePeriod) {
    this.tolerancePeriod = tolerancePeriod;
  }


   /**
   * The encoded key of the arrears base settings, auto generated, unique.
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the arrears base settings, auto generated, unique.")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public AccountArrearsSettings toleranceCalculationMethod(ToleranceCalculationMethodEnum toleranceCalculationMethod) {
    
    this.toleranceCalculationMethod = toleranceCalculationMethod;
    return this;
  }

   /**
   * Defines the tolerance calculation method
   * @return toleranceCalculationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the tolerance calculation method")
  @JsonProperty(JSON_PROPERTY_TOLERANCE_CALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ToleranceCalculationMethodEnum getToleranceCalculationMethod() {
    return toleranceCalculationMethod;
  }


  public void setToleranceCalculationMethod(ToleranceCalculationMethodEnum toleranceCalculationMethod) {
    this.toleranceCalculationMethod = toleranceCalculationMethod;
  }


  public AccountArrearsSettings dateCalculationMethod(DateCalculationMethodEnum dateCalculationMethod) {
    
    this.dateCalculationMethod = dateCalculationMethod;
    return this;
  }

   /**
   * The arrears date calculation method.
   * @return dateCalculationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The arrears date calculation method.")
  @JsonProperty(JSON_PROPERTY_DATE_CALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateCalculationMethodEnum getDateCalculationMethod() {
    return dateCalculationMethod;
  }


  public void setDateCalculationMethod(DateCalculationMethodEnum dateCalculationMethod) {
    this.dateCalculationMethod = dateCalculationMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountArrearsSettings accountArrearsSettings = (AccountArrearsSettings) o;
    return Objects.equals(this.monthlyToleranceDay, accountArrearsSettings.monthlyToleranceDay) &&
        Objects.equals(this.nonWorkingDaysMethod, accountArrearsSettings.nonWorkingDaysMethod) &&
        Objects.equals(this.tolerancePeriod, accountArrearsSettings.tolerancePeriod) &&
        Objects.equals(this.encodedKey, accountArrearsSettings.encodedKey) &&
        Objects.equals(this.toleranceCalculationMethod, accountArrearsSettings.toleranceCalculationMethod) &&
        Objects.equals(this.dateCalculationMethod, accountArrearsSettings.dateCalculationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthlyToleranceDay, nonWorkingDaysMethod, tolerancePeriod, encodedKey, toleranceCalculationMethod, dateCalculationMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountArrearsSettings {\n");
    sb.append("    monthlyToleranceDay: ").append(toIndentedString(monthlyToleranceDay)).append("\n");
    sb.append("    nonWorkingDaysMethod: ").append(toIndentedString(nonWorkingDaysMethod)).append("\n");
    sb.append("    tolerancePeriod: ").append(toIndentedString(tolerancePeriod)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    toleranceCalculationMethod: ").append(toIndentedString(toleranceCalculationMethod)).append("\n");
    sb.append("    dateCalculationMethod: ").append(toIndentedString(dateCalculationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

