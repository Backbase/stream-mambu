/*
 * loans
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loans.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.loans.model.TrancheDisbursementDetails;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don&#39;t need the full amount and wouldn&#39;t want to pay interest on cash they don&#39;t need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. 
 */
@ApiModel(description = "In some cases organizations may approve loans but not disburse the full amount initially. They would like to spread the disbursement (and risk) over time. Likewise for the client, they may not need the full loan amount up front. They may want to have a loan to buy some equipment for their business but will make one purchase today and another purchase in a few months.  In these cases, they don't need the full amount and wouldn't want to pay interest on cash they don't need yet. A solution for this matter is the usage of disbursement in tranches. This class holds the information required for one of this tranche. ")
@JsonPropertyOrder({
  LoanTranche.JSON_PROPERTY_ENCODED_KEY,
  LoanTranche.JSON_PROPERTY_AMOUNT,
  LoanTranche.JSON_PROPERTY_DISBURSEMENT_DETAILS,
  LoanTranche.JSON_PROPERTY_TRANCHE_NUMBER
})

public class LoanTranche {
  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_DISBURSEMENT_DETAILS = "disbursementDetails";
  private TrancheDisbursementDetails disbursementDetails;

  public static final String JSON_PROPERTY_TRANCHE_NUMBER = "trancheNumber";
  private Integer trancheNumber;


   /**
   * The encoded key of the transaction details , auto generated, unique.
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the transaction details , auto generated, unique.")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public LoanTranche amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount this tranche has available for disburse
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The amount this tranche has available for disburse")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public LoanTranche disbursementDetails(TrancheDisbursementDetails disbursementDetails) {
    
    this.disbursementDetails = disbursementDetails;
    return this;
  }

   /**
   * Get disbursementDetails
   * @return disbursementDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISBURSEMENT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TrancheDisbursementDetails getDisbursementDetails() {
    return disbursementDetails;
  }


  public void setDisbursementDetails(TrancheDisbursementDetails disbursementDetails) {
    this.disbursementDetails = disbursementDetails;
  }


  public LoanTranche trancheNumber(Integer trancheNumber) {
    
    this.trancheNumber = trancheNumber;
    return this;
  }

   /**
   * Index indicating the tranche number
   * @return trancheNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Index indicating the tranche number")
  @JsonProperty(JSON_PROPERTY_TRANCHE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTrancheNumber() {
    return trancheNumber;
  }


  public void setTrancheNumber(Integer trancheNumber) {
    this.trancheNumber = trancheNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanTranche loanTranche = (LoanTranche) o;
    return Objects.equals(this.encodedKey, loanTranche.encodedKey) &&
        Objects.equals(this.amount, loanTranche.amount) &&
        Objects.equals(this.disbursementDetails, loanTranche.disbursementDetails) &&
        Objects.equals(this.trancheNumber, loanTranche.trancheNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodedKey, amount, disbursementDetails, trancheNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanTranche {\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    disbursementDetails: ").append(toIndentedString(disbursementDetails)).append("\n");
    sb.append("    trancheNumber: ").append(toIndentedString(trancheNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

