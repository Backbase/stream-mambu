/*
 * loanproducts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loan.products.model;

import java.util.Objects;
import java.util.Arrays;
import com.backbase.mambu.loan.products.model.GLAccountingRule;
import com.backbase.mambu.loan.products.model.PeriodIntervalSettings;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The response representation of the PredefinedFee. Represents a fee with a defined name and a fixed value.
 */
@ApiModel(description = "The response representation of the PredefinedFee. Represents a fee with a defined name and a fixed value.")
@JsonPropertyOrder({
  PredefinedFee.JSON_PROPERTY_AMOUNT,
  PredefinedFee.JSON_PROPERTY_LAST_MODIFIED_DATE,
  PredefinedFee.JSON_PROPERTY_AMOUNT_CALCULATION_METHOD,
  PredefinedFee.JSON_PROPERTY_TRIGGER,
  PredefinedFee.JSON_PROPERTY_CREATION_DATE,
  PredefinedFee.JSON_PROPERTY_ACCOUNTING_RULES,
  PredefinedFee.JSON_PROPERTY_NAME,
  PredefinedFee.JSON_PROPERTY_FEE_APPLICATION,
  PredefinedFee.JSON_PROPERTY_AMORTIZATION_SETTINGS,
  PredefinedFee.JSON_PROPERTY_ENCODED_KEY,
  PredefinedFee.JSON_PROPERTY_STATE,
  PredefinedFee.JSON_PROPERTY_APPLY_DATE_METHOD,
  PredefinedFee.JSON_PROPERTY_PERCENTAGE_AMOUNT
})

public class PredefinedFee {
  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_LAST_MODIFIED_DATE = "lastModifiedDate";
  private OffsetDateTime lastModifiedDate;

  /**
   * The amount from which the fee is calculated using percentageAmount
   */
  public enum AmountCalculationMethodEnum {
    FLAT("FLAT"),
    
    LOAN_AMOUNT_PERCENTAGE("LOAN_AMOUNT_PERCENTAGE"),
    
    REPAYMENT_PRINCIPAL_AMOUNT_PERCENTAGE("REPAYMENT_PRINCIPAL_AMOUNT_PERCENTAGE"),
    
    LOAN_AMOUNT_PERCENTAGE_NUMBER_OF_INSTALLMENTS("LOAN_AMOUNT_PERCENTAGE_NUMBER_OF_INSTALLMENTS"),
    
    FLAT_NUMBER_OF_INSTALLMENTS("FLAT_NUMBER_OF_INSTALLMENTS");

    private String value;

    AmountCalculationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AmountCalculationMethodEnum fromValue(String value) {
      for (AmountCalculationMethodEnum b : AmountCalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AMOUNT_CALCULATION_METHOD = "amountCalculationMethod";
  private AmountCalculationMethodEnum amountCalculationMethod;

  /**
   * Shows the event that will trigger a fee
   */
  public enum TriggerEnum {
    MANUAL("MANUAL"),
    
    DISBURSEMENT("DISBURSEMENT"),
    
    CAPITALIZED_DISBURSEMENT("CAPITALIZED_DISBURSEMENT"),
    
    UPFRONT_DISBURSEMENT("UPFRONT_DISBURSEMENT"),
    
    LATE_REPAYMENT("LATE_REPAYMENT"),
    
    MONTHLY_FEE("MONTHLY_FEE"),
    
    PAYMENT_DUE("PAYMENT_DUE"),
    
    PAYMENT_DUE_APPLIED_ON_DUE_DATES("PAYMENT_DUE_APPLIED_ON_DUE_DATES"),
    
    ARBITRARY("ARBITRARY");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRIGGER = "trigger";
  private TriggerEnum trigger;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_ACCOUNTING_RULES = "accountingRules";
  private List<GLAccountingRule> accountingRules = null;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The type of fee application when disbursement is applied
   */
  public enum FeeApplicationEnum {
    REQUIRED("REQUIRED"),
    
    OPTIONAL("OPTIONAL");

    private String value;

    FeeApplicationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FeeApplicationEnum fromValue(String value) {
      for (FeeApplicationEnum b : FeeApplicationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FEE_APPLICATION = "feeApplication";
  private FeeApplicationEnum feeApplication;

  public static final String JSON_PROPERTY_AMORTIZATION_SETTINGS = "amortizationSettings";
  private PeriodIntervalSettings amortizationSettings;

  public static final String JSON_PROPERTY_ENCODED_KEY = "encodedKey";
  private String encodedKey;

  /**
   * Indicates the state of the fee
   */
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  /**
   * Shows when a fee should be applied; to be used with monthly deposit fees
   */
  public enum ApplyDateMethodEnum {
    MONTHLY_FROM_ACTIVATION("MONTHLY_FROM_ACTIVATION"),
    
    FIRST_OF_EVERY_MONTH("FIRST_OF_EVERY_MONTH");

    private String value;

    ApplyDateMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApplyDateMethodEnum fromValue(String value) {
      for (ApplyDateMethodEnum b : ApplyDateMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_APPLY_DATE_METHOD = "applyDateMethod";
  private ApplyDateMethodEnum applyDateMethod;

  public static final String JSON_PROPERTY_PERCENTAGE_AMOUNT = "percentageAmount";
  private BigDecimal percentageAmount;


  public PredefinedFee amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the fee
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of the fee")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public PredefinedFee lastModifiedDate(OffsetDateTime lastModifiedDate) {
    
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * Shows the last modified date of the fee
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "Shows the last modified date of the fee")
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }


  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public PredefinedFee amountCalculationMethod(AmountCalculationMethodEnum amountCalculationMethod) {
    
    this.amountCalculationMethod = amountCalculationMethod;
    return this;
  }

   /**
   * The amount from which the fee is calculated using percentageAmount
   * @return amountCalculationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount from which the fee is calculated using percentageAmount")
  @JsonProperty(JSON_PROPERTY_AMOUNT_CALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AmountCalculationMethodEnum getAmountCalculationMethod() {
    return amountCalculationMethod;
  }


  public void setAmountCalculationMethod(AmountCalculationMethodEnum amountCalculationMethod) {
    this.amountCalculationMethod = amountCalculationMethod;
  }


  public PredefinedFee trigger(TriggerEnum trigger) {
    
    this.trigger = trigger;
    return this;
  }

   /**
   * Shows the event that will trigger a fee
   * @return trigger
  **/
  @ApiModelProperty(required = true, value = "Shows the event that will trigger a fee")
  @JsonProperty(JSON_PROPERTY_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TriggerEnum getTrigger() {
    return trigger;
  }


  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public PredefinedFee creationDate(OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Shows the creation date of the fee
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-09-06T13:37:50+03:00", value = "Shows the creation date of the fee")
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public PredefinedFee accountingRules(List<GLAccountingRule> accountingRules) {
    
    this.accountingRules = accountingRules;
    return this;
  }

  public PredefinedFee addAccountingRulesItem(GLAccountingRule accountingRulesItem) {
    if (this.accountingRules == null) {
      this.accountingRules = new ArrayList<>();
    }
    this.accountingRules.add(accountingRulesItem);
    return this;
  }

   /**
   * A list of accounting rules defined for this fee. If null, product default rules are selected.
   * @return accountingRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of accounting rules defined for this fee. If null, product default rules are selected.")
  @JsonProperty(JSON_PROPERTY_ACCOUNTING_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GLAccountingRule> getAccountingRules() {
    return accountingRules;
  }


  public void setAccountingRules(List<GLAccountingRule> accountingRules) {
    this.accountingRules = accountingRules;
  }


  public PredefinedFee name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the fee
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the fee")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PredefinedFee feeApplication(FeeApplicationEnum feeApplication) {
    
    this.feeApplication = feeApplication;
    return this;
  }

   /**
   * The type of fee application when disbursement is applied
   * @return feeApplication
  **/
  @ApiModelProperty(required = true, value = "The type of fee application when disbursement is applied")
  @JsonProperty(JSON_PROPERTY_FEE_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FeeApplicationEnum getFeeApplication() {
    return feeApplication;
  }


  public void setFeeApplication(FeeApplicationEnum feeApplication) {
    this.feeApplication = feeApplication;
  }


  public PredefinedFee amortizationSettings(PeriodIntervalSettings amortizationSettings) {
    
    this.amortizationSettings = amortizationSettings;
    return this;
  }

   /**
   * Get amortizationSettings
   * @return amortizationSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AMORTIZATION_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PeriodIntervalSettings getAmortizationSettings() {
    return amortizationSettings;
  }


  public void setAmortizationSettings(PeriodIntervalSettings amortizationSettings) {
    this.amortizationSettings = amortizationSettings;
  }


   /**
   * The encoded key of the predefined fee, auto generated, unique
   * @return encodedKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encoded key of the predefined fee, auto generated, unique")
  @JsonProperty(JSON_PROPERTY_ENCODED_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncodedKey() {
    return encodedKey;
  }




  public PredefinedFee state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Indicates the state of the fee
   * @return state
  **/
  @ApiModelProperty(required = true, value = "Indicates the state of the fee")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public PredefinedFee applyDateMethod(ApplyDateMethodEnum applyDateMethod) {
    
    this.applyDateMethod = applyDateMethod;
    return this;
  }

   /**
   * Shows when a fee should be applied; to be used with monthly deposit fees
   * @return applyDateMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shows when a fee should be applied; to be used with monthly deposit fees")
  @JsonProperty(JSON_PROPERTY_APPLY_DATE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplyDateMethodEnum getApplyDateMethod() {
    return applyDateMethod;
  }


  public void setApplyDateMethod(ApplyDateMethodEnum applyDateMethod) {
    this.applyDateMethod = applyDateMethod;
  }


  public PredefinedFee percentageAmount(BigDecimal percentageAmount) {
    
    this.percentageAmount = percentageAmount;
    return this;
  }

   /**
   * The amount of the fee in percents applied to percentSource
   * @return percentageAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of the fee in percents applied to percentSource")
  @JsonProperty(JSON_PROPERTY_PERCENTAGE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPercentageAmount() {
    return percentageAmount;
  }


  public void setPercentageAmount(BigDecimal percentageAmount) {
    this.percentageAmount = percentageAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredefinedFee predefinedFee = (PredefinedFee) o;
    return Objects.equals(this.amount, predefinedFee.amount) &&
        Objects.equals(this.lastModifiedDate, predefinedFee.lastModifiedDate) &&
        Objects.equals(this.amountCalculationMethod, predefinedFee.amountCalculationMethod) &&
        Objects.equals(this.trigger, predefinedFee.trigger) &&
        Objects.equals(this.creationDate, predefinedFee.creationDate) &&
        Objects.equals(this.accountingRules, predefinedFee.accountingRules) &&
        Objects.equals(this.name, predefinedFee.name) &&
        Objects.equals(this.feeApplication, predefinedFee.feeApplication) &&
        Objects.equals(this.amortizationSettings, predefinedFee.amortizationSettings) &&
        Objects.equals(this.encodedKey, predefinedFee.encodedKey) &&
        Objects.equals(this.state, predefinedFee.state) &&
        Objects.equals(this.applyDateMethod, predefinedFee.applyDateMethod) &&
        Objects.equals(this.percentageAmount, predefinedFee.percentageAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, lastModifiedDate, amountCalculationMethod, trigger, creationDate, accountingRules, name, feeApplication, amortizationSettings, encodedKey, state, applyDateMethod, percentageAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredefinedFee {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    amountCalculationMethod: ").append(toIndentedString(amountCalculationMethod)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    accountingRules: ").append(toIndentedString(accountingRules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    feeApplication: ").append(toIndentedString(feeApplication)).append("\n");
    sb.append("    amortizationSettings: ").append(toIndentedString(amortizationSettings)).append("\n");
    sb.append("    encodedKey: ").append(toIndentedString(encodedKey)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    applyDateMethod: ").append(toIndentedString(applyDateMethod)).append("\n");
    sb.append("    percentageAmount: ").append(toIndentedString(percentageAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

