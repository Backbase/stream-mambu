/*
 * loanproducts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loan.products.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Defines the prepayment settings for the product
 */
@ApiModel(description = "Defines the prepayment settings for the product")
@JsonPropertyOrder({
  ProductPrepaymentSettings.JSON_PROPERTY_FUTURE_PAYMENTS_ACCEPTANCE,
  ProductPrepaymentSettings.JSON_PROPERTY_APPLY_INTEREST_ON_PREPAYMENT_METHOD,
  ProductPrepaymentSettings.JSON_PROPERTY_PREPAYMENT_ACCEPTANCE,
  ProductPrepaymentSettings.JSON_PROPERTY_ELEMENTS_RECALCULATION_METHOD,
  ProductPrepaymentSettings.JSON_PROPERTY_PRINCIPAL_PAID_INSTALLMENT_STATUS,
  ProductPrepaymentSettings.JSON_PROPERTY_PREPAYMENT_RECALCULATION_METHOD
})

public class ProductPrepaymentSettings {
  /**
   * Shows whether the future payments are allowed or not for this product (repayment transactions with entry date set in the future)
   */
  public enum FuturePaymentsAcceptanceEnum {
    NO_FUTURE_PAYMENTS("NO_FUTURE_PAYMENTS"),
    
    ACCEPT_FUTURE_PAYMENTS("ACCEPT_FUTURE_PAYMENTS"),
    
    ACCEPT_OVERPAYMENTS("ACCEPT_OVERPAYMENTS");

    private String value;

    FuturePaymentsAcceptanceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FuturePaymentsAcceptanceEnum fromValue(String value) {
      for (FuturePaymentsAcceptanceEnum b : FuturePaymentsAcceptanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FUTURE_PAYMENTS_ACCEPTANCE = "futurePaymentsAcceptance";
  private FuturePaymentsAcceptanceEnum futurePaymentsAcceptance;

  /**
   * Whether the interest on prepayment is applied manual or automatic.
   */
  public enum ApplyInterestOnPrepaymentMethodEnum {
    AUTOMATIC("AUTOMATIC"),
    
    MANUAL("MANUAL");

    private String value;

    ApplyInterestOnPrepaymentMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ApplyInterestOnPrepaymentMethodEnum fromValue(String value) {
      for (ApplyInterestOnPrepaymentMethodEnum b : ApplyInterestOnPrepaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_APPLY_INTEREST_ON_PREPAYMENT_METHOD = "applyInterestOnPrepaymentMethod";
  private ApplyInterestOnPrepaymentMethodEnum applyInterestOnPrepaymentMethod;

  /**
   * Shows whether the pre-payments are allowed or not for this product.
   */
  public enum PrepaymentAcceptanceEnum {
    ACCEPT_PREPAYMENTS("ACCEPT_PREPAYMENTS"),
    
    NO_PREPAYMENTS("NO_PREPAYMENTS");

    private String value;

    PrepaymentAcceptanceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrepaymentAcceptanceEnum fromValue(String value) {
      for (PrepaymentAcceptanceEnum b : PrepaymentAcceptanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PREPAYMENT_ACCEPTANCE = "prepaymentAcceptance";
  private PrepaymentAcceptanceEnum prepaymentAcceptance;

  /**
   * The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated
   */
  public enum ElementsRecalculationMethodEnum {
    PRINCIPAL_EXPECTED_FIXED("PRINCIPAL_EXPECTED_FIXED"),
    
    TOTAL_EXPECTED_FIXED("TOTAL_EXPECTED_FIXED");

    private String value;

    ElementsRecalculationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ElementsRecalculationMethodEnum fromValue(String value) {
      for (ElementsRecalculationMethodEnum b : ElementsRecalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ELEMENTS_RECALCULATION_METHOD = "elementsRecalculationMethod";
  private ElementsRecalculationMethodEnum elementsRecalculationMethod;

  /**
   * Installment status for the case when principal is paid off (copied from loan product)
   */
  public enum PrincipalPaidInstallmentStatusEnum {
    PARTIALLY_PAID("PARTIALLY_PAID"),
    
    PAID("PAID"),
    
    ORIGINAL_TOTAL_EXPECTED_PAID("ORIGINAL_TOTAL_EXPECTED_PAID");

    private String value;

    PrincipalPaidInstallmentStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrincipalPaidInstallmentStatusEnum fromValue(String value) {
      for (PrincipalPaidInstallmentStatusEnum b : PrincipalPaidInstallmentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRINCIPAL_PAID_INSTALLMENT_STATUS = "principalPaidInstallmentStatus";
  private PrincipalPaidInstallmentStatusEnum principalPaidInstallmentStatus;

  /**
   * Prepayment recalculation method copied from the loan product on which this account is based
   */
  public enum PrepaymentRecalculationMethodEnum {
    NO_RECALCULATION("NO_RECALCULATION"),
    
    RESCHEDULE_REMAINING_REPAYMENTS("RESCHEDULE_REMAINING_REPAYMENTS"),
    
    RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS("RECALCULATE_SCHEDULE_KEEP_SAME_NUMBER_OF_TERMS"),
    
    RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT("RECALCULATE_SCHEDULE_KEEP_SAME_PRINCIPAL_AMOUNT"),
    
    RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT("RECALCULATE_SCHEDULE_KEEP_SAME_TOTAL_REPAYMENT_AMOUNT"),
    
    REDUCE_AMOUNT_PER_INSTALLMENT("REDUCE_AMOUNT_PER_INSTALLMENT"),
    
    REDUCE_NUMBER_OF_INSTALLMENTS("REDUCE_NUMBER_OF_INSTALLMENTS"),
    
    REDUCE_NUMBER_OF_INSTALLMENTS_NEW("REDUCE_NUMBER_OF_INSTALLMENTS_NEW");

    private String value;

    PrepaymentRecalculationMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrepaymentRecalculationMethodEnum fromValue(String value) {
      for (PrepaymentRecalculationMethodEnum b : PrepaymentRecalculationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PREPAYMENT_RECALCULATION_METHOD = "prepaymentRecalculationMethod";
  private PrepaymentRecalculationMethodEnum prepaymentRecalculationMethod;


  public ProductPrepaymentSettings futurePaymentsAcceptance(FuturePaymentsAcceptanceEnum futurePaymentsAcceptance) {
    
    this.futurePaymentsAcceptance = futurePaymentsAcceptance;
    return this;
  }

   /**
   * Shows whether the future payments are allowed or not for this product (repayment transactions with entry date set in the future)
   * @return futurePaymentsAcceptance
  **/
  @ApiModelProperty(required = true, value = "Shows whether the future payments are allowed or not for this product (repayment transactions with entry date set in the future)")
  @JsonProperty(JSON_PROPERTY_FUTURE_PAYMENTS_ACCEPTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FuturePaymentsAcceptanceEnum getFuturePaymentsAcceptance() {
    return futurePaymentsAcceptance;
  }


  public void setFuturePaymentsAcceptance(FuturePaymentsAcceptanceEnum futurePaymentsAcceptance) {
    this.futurePaymentsAcceptance = futurePaymentsAcceptance;
  }


  public ProductPrepaymentSettings applyInterestOnPrepaymentMethod(ApplyInterestOnPrepaymentMethodEnum applyInterestOnPrepaymentMethod) {
    
    this.applyInterestOnPrepaymentMethod = applyInterestOnPrepaymentMethod;
    return this;
  }

   /**
   * Whether the interest on prepayment is applied manual or automatic.
   * @return applyInterestOnPrepaymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the interest on prepayment is applied manual or automatic.")
  @JsonProperty(JSON_PROPERTY_APPLY_INTEREST_ON_PREPAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ApplyInterestOnPrepaymentMethodEnum getApplyInterestOnPrepaymentMethod() {
    return applyInterestOnPrepaymentMethod;
  }


  public void setApplyInterestOnPrepaymentMethod(ApplyInterestOnPrepaymentMethodEnum applyInterestOnPrepaymentMethod) {
    this.applyInterestOnPrepaymentMethod = applyInterestOnPrepaymentMethod;
  }


  public ProductPrepaymentSettings prepaymentAcceptance(PrepaymentAcceptanceEnum prepaymentAcceptance) {
    
    this.prepaymentAcceptance = prepaymentAcceptance;
    return this;
  }

   /**
   * Shows whether the pre-payments are allowed or not for this product.
   * @return prepaymentAcceptance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shows whether the pre-payments are allowed or not for this product.")
  @JsonProperty(JSON_PROPERTY_PREPAYMENT_ACCEPTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrepaymentAcceptanceEnum getPrepaymentAcceptance() {
    return prepaymentAcceptance;
  }


  public void setPrepaymentAcceptance(PrepaymentAcceptanceEnum prepaymentAcceptance) {
    this.prepaymentAcceptance = prepaymentAcceptance;
  }


  public ProductPrepaymentSettings elementsRecalculationMethod(ElementsRecalculationMethodEnum elementsRecalculationMethod) {
    
    this.elementsRecalculationMethod = elementsRecalculationMethod;
    return this;
  }

   /**
   * The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated
   * @return elementsRecalculationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The elements recalculation method, indicates how the declining balance with equal installments repayments are recalculated")
  @JsonProperty(JSON_PROPERTY_ELEMENTS_RECALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ElementsRecalculationMethodEnum getElementsRecalculationMethod() {
    return elementsRecalculationMethod;
  }


  public void setElementsRecalculationMethod(ElementsRecalculationMethodEnum elementsRecalculationMethod) {
    this.elementsRecalculationMethod = elementsRecalculationMethod;
  }


  public ProductPrepaymentSettings principalPaidInstallmentStatus(PrincipalPaidInstallmentStatusEnum principalPaidInstallmentStatus) {
    
    this.principalPaidInstallmentStatus = principalPaidInstallmentStatus;
    return this;
  }

   /**
   * Installment status for the case when principal is paid off (copied from loan product)
   * @return principalPaidInstallmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Installment status for the case when principal is paid off (copied from loan product)")
  @JsonProperty(JSON_PROPERTY_PRINCIPAL_PAID_INSTALLMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrincipalPaidInstallmentStatusEnum getPrincipalPaidInstallmentStatus() {
    return principalPaidInstallmentStatus;
  }


  public void setPrincipalPaidInstallmentStatus(PrincipalPaidInstallmentStatusEnum principalPaidInstallmentStatus) {
    this.principalPaidInstallmentStatus = principalPaidInstallmentStatus;
  }


  public ProductPrepaymentSettings prepaymentRecalculationMethod(PrepaymentRecalculationMethodEnum prepaymentRecalculationMethod) {
    
    this.prepaymentRecalculationMethod = prepaymentRecalculationMethod;
    return this;
  }

   /**
   * Prepayment recalculation method copied from the loan product on which this account is based
   * @return prepaymentRecalculationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prepayment recalculation method copied from the loan product on which this account is based")
  @JsonProperty(JSON_PROPERTY_PREPAYMENT_RECALCULATION_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrepaymentRecalculationMethodEnum getPrepaymentRecalculationMethod() {
    return prepaymentRecalculationMethod;
  }


  public void setPrepaymentRecalculationMethod(PrepaymentRecalculationMethodEnum prepaymentRecalculationMethod) {
    this.prepaymentRecalculationMethod = prepaymentRecalculationMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductPrepaymentSettings productPrepaymentSettings = (ProductPrepaymentSettings) o;
    return Objects.equals(this.futurePaymentsAcceptance, productPrepaymentSettings.futurePaymentsAcceptance) &&
        Objects.equals(this.applyInterestOnPrepaymentMethod, productPrepaymentSettings.applyInterestOnPrepaymentMethod) &&
        Objects.equals(this.prepaymentAcceptance, productPrepaymentSettings.prepaymentAcceptance) &&
        Objects.equals(this.elementsRecalculationMethod, productPrepaymentSettings.elementsRecalculationMethod) &&
        Objects.equals(this.principalPaidInstallmentStatus, productPrepaymentSettings.principalPaidInstallmentStatus) &&
        Objects.equals(this.prepaymentRecalculationMethod, productPrepaymentSettings.prepaymentRecalculationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(futurePaymentsAcceptance, applyInterestOnPrepaymentMethod, prepaymentAcceptance, elementsRecalculationMethod, principalPaidInstallmentStatus, prepaymentRecalculationMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductPrepaymentSettings {\n");
    sb.append("    futurePaymentsAcceptance: ").append(toIndentedString(futurePaymentsAcceptance)).append("\n");
    sb.append("    applyInterestOnPrepaymentMethod: ").append(toIndentedString(applyInterestOnPrepaymentMethod)).append("\n");
    sb.append("    prepaymentAcceptance: ").append(toIndentedString(prepaymentAcceptance)).append("\n");
    sb.append("    elementsRecalculationMethod: ").append(toIndentedString(elementsRecalculationMethod)).append("\n");
    sb.append("    principalPaidInstallmentStatus: ").append(toIndentedString(principalPaidInstallmentStatus)).append("\n");
    sb.append("    prepaymentRecalculationMethod: ").append(toIndentedString(prepaymentRecalculationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

