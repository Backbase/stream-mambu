/*
 * loanproducts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.backbase.mambu.loan.products.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Settings applied when transitioning accounts to Locked state
 */
@ApiModel(description = "Settings applied when transitioning accounts to Locked state")
@JsonPropertyOrder({
  LockSettings.JSON_PROPERTY_CAPPING_PERCENTAGE,
  LockSettings.JSON_PROPERTY_LOCK_PERIOD_DAYS,
  LockSettings.JSON_PROPERTY_CAPPING_CONSTRAINT_TYPE,
  LockSettings.JSON_PROPERTY_CAPPING_METHOD
})

public class LockSettings {
  public static final String JSON_PROPERTY_CAPPING_PERCENTAGE = "cappingPercentage";
  private BigDecimal cappingPercentage;

  public static final String JSON_PROPERTY_LOCK_PERIOD_DAYS = "lockPeriodDays";
  private Integer lockPeriodDays;

  /**
   * Specifies constraint types for capping charges.
   */
  public enum CappingConstraintTypeEnum {
    SOFT_CAP("SOFT_CAP"),
    
    HARD_CAP("HARD_CAP");

    private String value;

    CappingConstraintTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CappingConstraintTypeEnum fromValue(String value) {
      for (CappingConstraintTypeEnum b : CappingConstraintTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CAPPING_CONSTRAINT_TYPE = "cappingConstraintType";
  private CappingConstraintTypeEnum cappingConstraintType;

  /**
   * Specifies how principal will be used when calculating capping charges.
   */
  public enum CappingMethodEnum {
    OUTSTANDING_PRINCIPAL_PERCENTAGE("OUTSTANDING_PRINCIPAL_PERCENTAGE"),
    
    ORIGINAL_PRINCIPAL_PERCENTAGE("ORIGINAL_PRINCIPAL_PERCENTAGE");

    private String value;

    CappingMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CappingMethodEnum fromValue(String value) {
      for (CappingMethodEnum b : CappingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CAPPING_METHOD = "cappingMethod";
  private CappingMethodEnum cappingMethod;


  public LockSettings cappingPercentage(BigDecimal cappingPercentage) {
    
    this.cappingPercentage = cappingPercentage;
    return this;
  }

   /**
   * Specifies the percentage of principal that cannot be exceeded by the sum of interest, fees and penalty balances.
   * @return cappingPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the percentage of principal that cannot be exceeded by the sum of interest, fees and penalty balances.")
  @JsonProperty(JSON_PROPERTY_CAPPING_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCappingPercentage() {
    return cappingPercentage;
  }


  public void setCappingPercentage(BigDecimal cappingPercentage) {
    this.cappingPercentage = cappingPercentage;
  }


  public LockSettings lockPeriodDays(Integer lockPeriodDays) {
    
    this.lockPeriodDays = lockPeriodDays;
    return this;
  }

   /**
   * Specifies the number of days for in which the account will be locked if it stays in arrears.
   * @return lockPeriodDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of days for in which the account will be locked if it stays in arrears.")
  @JsonProperty(JSON_PROPERTY_LOCK_PERIOD_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLockPeriodDays() {
    return lockPeriodDays;
  }


  public void setLockPeriodDays(Integer lockPeriodDays) {
    this.lockPeriodDays = lockPeriodDays;
  }


  public LockSettings cappingConstraintType(CappingConstraintTypeEnum cappingConstraintType) {
    
    this.cappingConstraintType = cappingConstraintType;
    return this;
  }

   /**
   * Specifies constraint types for capping charges.
   * @return cappingConstraintType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies constraint types for capping charges.")
  @JsonProperty(JSON_PROPERTY_CAPPING_CONSTRAINT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CappingConstraintTypeEnum getCappingConstraintType() {
    return cappingConstraintType;
  }


  public void setCappingConstraintType(CappingConstraintTypeEnum cappingConstraintType) {
    this.cappingConstraintType = cappingConstraintType;
  }


  public LockSettings cappingMethod(CappingMethodEnum cappingMethod) {
    
    this.cappingMethod = cappingMethod;
    return this;
  }

   /**
   * Specifies how principal will be used when calculating capping charges.
   * @return cappingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies how principal will be used when calculating capping charges.")
  @JsonProperty(JSON_PROPERTY_CAPPING_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CappingMethodEnum getCappingMethod() {
    return cappingMethod;
  }


  public void setCappingMethod(CappingMethodEnum cappingMethod) {
    this.cappingMethod = cappingMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LockSettings lockSettings = (LockSettings) o;
    return Objects.equals(this.cappingPercentage, lockSettings.cappingPercentage) &&
        Objects.equals(this.lockPeriodDays, lockSettings.lockPeriodDays) &&
        Objects.equals(this.cappingConstraintType, lockSettings.cappingConstraintType) &&
        Objects.equals(this.cappingMethod, lockSettings.cappingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cappingPercentage, lockPeriodDays, cappingConstraintType, cappingMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LockSettings {\n");
    sb.append("    cappingPercentage: ").append(toIndentedString(cappingPercentage)).append("\n");
    sb.append("    lockPeriodDays: ").append(toIndentedString(lockPeriodDays)).append("\n");
    sb.append("    cappingConstraintType: ").append(toIndentedString(cappingConstraintType)).append("\n");
    sb.append("    cappingMethod: ").append(toIndentedString(cappingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

